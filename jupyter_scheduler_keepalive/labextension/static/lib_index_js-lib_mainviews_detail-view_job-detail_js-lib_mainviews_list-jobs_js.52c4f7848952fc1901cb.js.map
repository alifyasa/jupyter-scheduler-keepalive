{"version":3,"file":"lib_index_js-lib_mainviews_detail-view_job-detail_js-lib_mainviews_list-jobs_js.52c4f7848952fc1901cb.js","mappings":"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ACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,QAAQ;AAC1B;AACA;AACA;AACA,kDAAkD;AAClD;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,QAAQ,EAAE,MAAM;AACtC;AACA;AACA;AACA,sBAAsB,QAAQ,EAAE,MAAM,MAAM,QAAQ;AACpD;AACA;AACA,sBAAsB,QAAQ,EAAE,MAAM;AACtC;AACA;AACA,sBAAsB,QAAQ,EAAE,MAAM,EAAE,UAAU;AAClD;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,yDAAkB;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;AC/U0B;AACnB;AACP,YAAY,0DAAmB,UAAU,iCAAiC,gBAAgB,GAAG;AAC7F;;;;;;;;;;;;;;;;;;;;ACHyD;AAC/B;AACnB,mBAAmB,0DAAmB;AAC7C;AACA,CAAC;AACD;AACA,0BAA0B,0DAAmB,CAAC,mEAAc;AAC5D,iEAAe,iBAAiB,EAAC;;;;;;;;;;;;;;;;;;;;ACPc;AACS;AACxD;AACO;AACP;AACA;AACA,sCAAsC,kEAAgB;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gDAAgD,mCAAmC,GAAG,8BAA8B;AACpH;AACA;AACA;AACA,0BAA0B,yBAAyB,GAAG,0BAA0B;AAChF,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,4EAA4E,cAAc;AAC1F;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,cAAc;AAChC;AACA;AACA,2EAA2E,MAAM;AACjF;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,cAAc;AAC1F;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,OAAO;AAC3B;AACA,gEAAgE,MAAM;AACtE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,OAAO;AAC1C;AACA,gEAAgE,MAAM;AACtE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB,YAAY;AACjC;AACA;AACA,+BAA+B,2BAA2B;AAC1D;AACA;AACA,sEAAsE,MAAM;AAC5E;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4EAA4E,cAAc;AAC1F;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,OAAO;AACjE;AACA,uCAAuC,QAAQ;AAC/C,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,OAAO;AACjE;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,SAAS;AAC9E;AACA,uCAAuC,eAAe;AACtD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,SAAS;AAC9E;AACA,uCAAuC,cAAc;AACrD,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,MAAM,6BAA6B,WAAW;AACxG;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEAAqE,SAAS;AAC9E;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4DAA4D;AAC5D;AACA,uBAAuB,yDAAM;AAC7B;AACA;AACA,yBAAyB,kEAAgB;AACzC;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB,kEAAgB;AAClC;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK,0EAA0E;AAC/E,CAAC,8BAA8B;;;;;;;;;;;;;;;;;;;AC7QI;AACuB;AACnD;AACP,uBAAuB,iDAAU,CAAC,gDAAiB;AACnD;AACA;AACO;AACP,mBAAmB,iDAAU,CAAC,gDAAU;AACxC;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACT0D;AAC+B;AAC3B;AACb;AACO;AACA;AACF;AACL;AACwC;AAC5C;AACW;AACE;AACrB;AACoB;AACE;AACpD;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,gCAAgC;AAC1B;AAC8B;AACrC;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,cAAc;AAChD;AACA;AACA;AACA,yBAAyB,kEAAgB;AACzC;AACA,YAAY,gEAAU;AACtB;AACA,sBAAsB,kEAAwB;AAC9C,0BAA0B,wDAAM;AAChC,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ,wEAAmB;AAC3B,QAAQ,kEAAgB;AACxB,QAAQ,gEAAW;AACnB,QAAQ,oEAAe;AACvB,QAAQ,8CAAS;AACjB,QAAQ,8CAAS;AACjB;AACA,eAAe,2DAAS;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8CAAS;AACvB;AACA,eAAe,yDAAe;AAC9B;AACA;AACA;AACA;AACA;AACA,cAAc,8CAAS;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,uDAAgB,GAAG;AACvC,4BAA4B,iBAAiB;AAC7C,YAAY,WAAW;AACvB;AACA,8BAA8B,+DAAa;AAC3C;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,UAAU;AACjE,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,oEAAiB;AAC7C;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,iCAAiC,gEAAc;AAC/C;AACA,aAAa;AACb;AACA,wCAAwC,iEAAiB;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAmB;AACtD;AACA,qCAAqC,yEAAa;AAClD;AACA;AACA,0BAA0B,6CAAQ;AAClC;AACA,aAAa;AACb,SAAS;AACT;AACA,cAAc,iEAAiB;AAC/B,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,4DAAmB;AACtD;AACA,qCAAqC,yEAAa;AAClD;AACA;AACA,0BAA0B,6CAAQ;AAClC;AACA,aAAa;AACb,SAAS;AACT;AACA,cAAc,iEAAiB;AAC/B,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,6CAAQ;AACtC,iBAAiB;AACjB,aAAa;AACb;AACA,kBAAkB,6DAAa;AAC/B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACoB;AACpB,iEAAe,OAAO,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7S0B;AACD;AACA;AACmB;AACrB;AACW;AACrB;AAC4B;AACvB;AACkB;AACV;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP,kBAAkB,qDAAa;AAC/B;AACA;AACA;AACA,gCAAgC,+CAAQ,GAAG;AAC3C,gBAAgB,8CAAO,WAAW,sDAAgB,GAAG;AACrD,0CAA0C;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,kBAAkB,uBAAuB;AAC3G;AACA;AACA;AACA,kEAAkE,kBAAkB,uBAAuB;AAC3G;AACA;AACA;AACA;AACA,kEAAkE,kBAAkB,eAAe;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,sFAAsF;AACtF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,kBAAkB,gDAAgD;AAChI;AACA;AACA;AACA;AACA;AACA,+BAA+B,4CAAQ;AACvC,SAAS;AACT;AACA,2BAA2B,6DAAe;AAC1C;AACA,kEAAkE,kBAAkB,8CAA8C;AAClI,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,aAAa;AAChD,oCAAoC,SAAS;AAC7C;AACA,8DAA8D,kBAAkB,uBAAuB;AACvG;AACA;AACA;AACA;AACA,yBAAyB,qBAAqB;AAC9C,8DAA8D,kBAAkB,uBAAuB;AACvG;AACA;AACA;AACA;AACA,gBAAgB,sDAAc;AAC9B,YAAY,0DAAmB,CAAC,4CAAG,IAAI,MAAM,QAAQ;AACrD,QAAQ,0DAAmB,WAAW,cAAc,WAAW,0CAA0C;AACzG,YAAY,0DAAmB,CAAC,8CAAK,IAAI,YAAY;AACrD,gBAAgB,0DAAmB,CAAC,wDAAO,IAAI,UAAU;AACzD,+BAA+B,0DAAmB,CAAC,gDAAK,IAAI,mBAAmB;AAC/E,gBAAgB,0DAAmB,CAAC,mEAAY,IAAI,0EAA0E;AAC9H,gBAAgB,0DAAmB,CAAC,2EAAgB,IAAI,0DAA0D,WAAW,oNAAoN;AACjV,gBAAgB,0DAAmB,CAAC,yDAAO,IAAI,oCAAoC;AACnF,qDAAqD,0DAAmB,CAAC,uDAAc;AACvF,wBAAwB,0DAAmB,CAAC,iDAAM,IAAI;AACtD;AACA,mDAAmD,4CAAQ;AAC3D,+BAA+B;AAC/B,wBAAwB,0DAAmB,CAAC,iDAAM,IAAI;AACtD;AACA;AACA;AACA,6BAA6B,2DAA2D;AACxF,qDAAqD,0DAAmB,CAAC,uDAAc;AACvF;AACA,wBAAwB,0DAAmB,CAAC,2DAAgB,IAAI,cAAc;AAC9E;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3JoE;AACpB;AACA;AACsB;AACQ;AACT;AACgC;AAClC;AACrB;AACW;AACrB;AACoB;AACE;AACR;AACE;AACiG;AAC5G;AACQ;AAC+B;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,kBAAkB,qDAAa;AAC/B;AACA,kDAAkD,+CAAQ;AAC1D,kEAAkE,+CAAQ;AAC1E;AACA;AACA;AACA,gCAAgC,+CAAQ,GAAG;AAC3C;AACA,8DAA8D,+CAAQ,GAAG;AACzE,gBAAgB,8CAAO,WAAW,sDAAgB,GAAG;AACrD;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,6FAA2B;AACvE,sEAAsE,kBAAkB,yFAAyF;AACjL;AACA;AACA;AACA,KAAK;AACL,uBAAuB,8CAAO;AAC9B;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,wBAAwB,6CAAM;AAC9B;AACA;AACA;AACA;AACA,IAAI,gDAAS;AACb;AACA;AACA;AACA;AACA,kEAAkE,kBAAkB;AACpF;AACA,wEAAwE;AACxE;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kEAAkE,kBAAkB,uBAAuB;AAC3G;AACA;AACA;AACA,kEAAkE,kBAAkB,uBAAuB;AAC3G;AACA;AACA;AACA;AACA,kEAAkE,kBAAkB,eAAe;AACnG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,6FAA2B;AACzE,kEAAkE,kBAAkB,4FAA4F;AAChL;AACA;AACA;AACA,kEAAkE,kBAAkB,6BAA6B;AACjH;AACA;AACA;AACA,kCAAkC,6FAA2B;AAC7D;AACA,oBAAoB,iCAAiC;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEAAsE,kBAAkB,sDAAsD;AAC9I;AACA;AACA;AACA;AACA,kEAAkE,kBAAkB,iEAAiE;AACrJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,cAAc;AAClC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,yEAAyE;AACzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,kBAAkB,gDAAgD;AAChI;AACA;AACA;AACA;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AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACO;AACP;AACA;AACA,6GAA6G;AAC7G;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,yCAAyC,4BAA4B,svBAAsvB;AAC3zB;AACO;AACP;AACA;AACA,2HAA2H;AAC3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,qDAAM;AAC9C,6CAA6C,qDAAM;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9M0B;AAC2B;AACD;AACQ;AACL;AACJ;AACE;AAC4B;AACb;AACX;AACY;AACf;AACI;AAC1D;AACA;AACA;AACA;AACO,gCAAgC,8DAAY;AACnD;AACA;AACA;AACA,gBAAgB,6CAAS;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4CAAQ;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,4CAAQ;AAChD;AACA;AACA;AACA;AACA;AACA,oFAAoF,0CAA0C,wCAAwC;AACtK;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oFAAoF,gEAAiB;AACrG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B,4CAAQ;AACtC;AACA;AACA;AACA,8BAA8B,4CAAQ;AACtC;AACA;AACA;AACA,8BAA8B,4CAAQ;AACtC,4EAA4E,uFAAuF,EAAE,yDAAqB;AAC1L;AACA,0LAA0L;AAC1L;AACA;AACA;AACA;AACA,kCAAkC,4CAAQ;AAC1C;AACA,gBAAgB,0DAAmB,CAAC,+DAAa,IAAI,OAAO,mEAAkB,IAAI;AAClF,YAAY,0DAAmB,CAAC,gDAAiB,aAAa,yBAAyB;AACvF,gBAAgB,0DAAmB,CAAC,gDAAU,aAAa,qCAAqC;AAChG,oBAAoB,0DAAmB,CAAC,qEAAa,IAAI,8LAA8L;AACvP,gDAAgD,4CAAQ,gBAAgB,0DAAmB,CAAC,4DAAS,IAAI,iOAAiO;AAC1U;AACA,4BAA4B,4CAAQ,kCAAkC,0DAAmB,CAAC,0FAAuB,IAAI,iOAAiO;AACtV,iDAAiD,4CAAQ;AACzD,oDAAoD,4CAAQ,yBAAyB,0DAAmB,CAAC,mEAAgB,IAAI,0TAA0T;AACvb,iDAAiD,4CAAQ;AACzD,oDAAoD,4CAAQ,0BAA0B,0DAAmB,CAAC,+DAAU,IAAI,sXAAsX;AAC9e,gDAAgD,4CAAQ,uBAAuB,0DAAmB,CAAC,8EAAiB,IAAI,2OAA2O;AACnW;AACA;;;;;;;;;;;;;;;;ACxKmD;AACnD;AACA;AACA;AACO;AACP;AACA,WAAW,gEAAW;AACtB;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;;;;;;;;;;;;;;;;AC1H0C;AACnC;AACP;AACA,qCAAqC,oDAAK;AAC1C,qCAAqC,oDAAK;AAC1C,CAAC,8BAA8B;;;;;;;;;;;;;;;;;;ACLL;AACnB,kCAAkC,0DAAmB;AAC5D,IAAI,0DAAmB;AACvB;AACA,QAAQ,0DAAmB;AAC3B;AACA,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB;AACA,QAAQ,0DAAmB;AAC3B;AACA,IAAI,0DAAmB;AACvB,IAAI,0DAAmB;AACvB;AACA,QAAQ,0DAAmB;AAC3B;AACA;AACA,QAAQ,0DAAmB;AAC3B;AACA;AACO;AACP;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACxBA;AACA,oDAAoD,KAAK;AACzD;AACA;AACA;AACO;AACP;AACA;AACA;AACO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO;AACP;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://@jupyterlab/scheduler/./lib/advanced-options.js","webpack://@jupyterlab/scheduler/./lib/components/advanced-table/advanced-table-header.js","webpack://@jupyterlab/scheduler/./lib/components/advanced-table/advanced-table.js","webpack://@jupyterlab/scheduler/./lib/components/button-bar.js","webpack://@jupyterlab/scheduler/./lib/components/cluster.js","webpack://@jupyterlab/scheduler/./lib/components/compute-type-picker.js","webpack://@jupyterlab/scheduler/./lib/components/confirm-buttons.js","webpack://@jupyterlab/scheduler/./lib/components/confirm-dialog-buttons.js","webpack://@jupyterlab/scheduler/./lib/components/create-schedule-options.js","webpack://@jupyterlab/scheduler/./lib/components/environment-picker.js","webpack://@jupyterlab/scheduler/./lib/components/error-boundary.js","webpack://@jupyterlab/scheduler/./lib/components/files-directory-link.js","webpack://@jupyterlab/scheduler/./lib/components/heading.js","webpack://@jupyterlab/scheduler/./lib/components/icon-buttons.js","webpack://@jupyterlab/scheduler/./lib/components/icons.js","webpack://@jupyterlab/scheduler/./lib/components/input-file-snapshot.js","webpack://@jupyterlab/scheduler/./lib/components/input-folder-checkbox.js","webpack://@jupyterlab/scheduler/./lib/components/job-definition-row.js","webpack://@jupyterlab/scheduler/./lib/components/job-file-link.js","webpack://@jupyterlab/scheduler/./lib/components/job-row.js","webpack://@jupyterlab/scheduler/./lib/components/labeled-value.js","webpack://@jupyterlab/scheduler/./lib/components/output-format-picker.js","webpack://@jupyterlab/scheduler/./lib/components/parameters-picker.js","webpack://@jupyterlab/scheduler/./lib/components/schedule-inputs.js","webpack://@jupyterlab/scheduler/./lib/components/stack.js","webpack://@jupyterlab/scheduler/./lib/context.js","webpack://@jupyterlab/scheduler/./lib/handler.js","webpack://@jupyterlab/scheduler/./lib/hooks.js","webpack://@jupyterlab/scheduler/./lib/index.js","webpack://@jupyterlab/scheduler/./lib/mainviews/create-job-from-definition.js","webpack://@jupyterlab/scheduler/./lib/mainviews/create-job.js","webpack://@jupyterlab/scheduler/./lib/mainviews/detail-view/detail-view.js","webpack://@jupyterlab/scheduler/./lib/mainviews/detail-view/job-definition.js","webpack://@jupyterlab/scheduler/./lib/mainviews/detail-view/job-detail.js","webpack://@jupyterlab/scheduler/./lib/mainviews/edit-job-definition.js","webpack://@jupyterlab/scheduler/./lib/mainviews/list-jobs.js","webpack://@jupyterlab/scheduler/./lib/model.js","webpack://@jupyterlab/scheduler/./lib/notebook-jobs-panel.js","webpack://@jupyterlab/scheduler/./lib/theme-provider.js","webpack://@jupyterlab/scheduler/./lib/tokens.js","webpack://@jupyterlab/scheduler/./lib/util/errors.js","webpack://@jupyterlab/scheduler/./lib/util/job-name-validation.js"],"sourcesContent":["import React from 'react';\nimport { FormLabel, Stack, TextField } from '@mui/material';\nimport { Cluster } from './components/cluster';\nimport { AddButton, DeleteButton } from './components/icon-buttons';\nimport { useTranslator } from './hooks';\nimport { JobsView } from './model';\nimport { LabeledValue } from './components/labeled-value';\nconst AdvancedOptions = (props) => {\n    var _a;\n    const formPrefix = 'jp-create-job-advanced-';\n    const trans = useTranslator('jupyterlab');\n    const handleInputChange = (e) => {\n        if (props.jobsView !== JobsView.CreateForm) {\n            return;\n        }\n        props.handleModelChange(Object.assign(Object.assign({}, props.model), { [e.target.name]: e.target.value }));\n    };\n    const handleTagChange = (event) => {\n        var _a;\n        if (props.jobsView !== JobsView.CreateForm) {\n            return;\n        }\n        const { name, value } = event.target;\n        const tagIdxMatch = name.match(/^tag-(\\d+)$/);\n        if (tagIdxMatch === null) {\n            return null;\n        }\n        const newTags = (_a = props.model.tags) !== null && _a !== void 0 ? _a : [];\n        newTags[parseInt(tagIdxMatch[1])] = value;\n        props.handleModelChange(Object.assign(Object.assign({}, props.model), { tags: newTags }));\n    };\n    const addTag = () => {\n        var _a;\n        if (props.jobsView !== JobsView.CreateForm) {\n            return;\n        }\n        const newTags = [...((_a = props.model.tags) !== null && _a !== void 0 ? _a : []), ''];\n        props.handleModelChange(Object.assign(Object.assign({}, props.model), { tags: newTags }));\n    };\n    const deleteTag = (idx) => {\n        var _a;\n        if (props.jobsView !== JobsView.CreateForm) {\n            return;\n        }\n        const newTags = (_a = props.model.tags) !== null && _a !== void 0 ? _a : [];\n        newTags.splice(idx, 1);\n        props.handleModelChange(Object.assign(Object.assign({}, props.model), { tags: newTags }));\n    };\n    const tags = (_a = props.model.tags) !== null && _a !== void 0 ? _a : [];\n    const createTags = () => {\n        return (React.createElement(Stack, { spacing: 2 },\n            tags.map((tag, idx) => (React.createElement(Cluster, { key: idx, justifyContent: \"flex-start\" },\n                React.createElement(TextField, { label: trans.__('Tag %1', idx + 1), id: `${formPrefix}tag-${idx}`, name: `tag-${idx}`, value: tag, onChange: handleTagChange }),\n                React.createElement(DeleteButton, { onClick: () => {\n                        // Remove tag\n                        deleteTag(idx);\n                        return false;\n                    }, title: trans.__('Delete tag %1', idx + 1), addedStyle: { marginTop: '4px' } })))),\n            React.createElement(Cluster, { justifyContent: \"flex-start\" },\n                React.createElement(AddButton, { onClick: (e) => {\n                        addTag();\n                        return false;\n                    }, title: trans.__('Add new tag') }))));\n    };\n    const showTags = () => {\n        if (!props.model.tags) {\n            return (React.createElement(Stack, { spacing: 2 },\n                React.createElement(\"p\", null,\n                    React.createElement(\"em\", null, trans.__('No tags')))));\n        }\n        return (React.createElement(Stack, { spacing: 2 }, tags.map((tag, idx) => (React.createElement(LabeledValue, { label: trans.__('Tag %1', idx + 1), id: `${formPrefix}tag-${idx}`, name: `tag-${idx}`, value: tag })))));\n    };\n    // Tags look different when they're for display or for editing.\n    const tagsDisplay = props.jobsView === JobsView.CreateForm ? createTags() : showTags();\n    // The idempotency token is only used for jobs, not for job definitions\n    const idemTokenLabel = trans.__('Idempotency token');\n    const idemTokenName = 'idempotencyToken';\n    const idemTokenId = `${formPrefix}${idemTokenName}`;\n    return (React.createElement(Stack, { spacing: 4 },\n        props.jobsView === JobsView.JobDetail && (React.createElement(LabeledValue, { label: idemTokenLabel, value: props.model.idempotencyToken, id: `${formPrefix}idempotencyToken`, name: idemTokenName })),\n        props.jobsView === JobsView.CreateForm &&\n            props.model.createType === 'Job' && (React.createElement(TextField, { label: idemTokenLabel, variant: \"outlined\", onChange: handleInputChange, value: props.model.idempotencyToken, id: idemTokenId, name: idemTokenName })),\n        React.createElement(FormLabel, { component: \"legend\" }, trans.__('Tags')),\n        tagsDisplay));\n};\nexport default AdvancedOptions;\n","import React from 'react';\nimport { caretDownIcon, caretUpIcon, LabIcon } from '@jupyterlab/ui-components';\nimport TableHead from '@mui/material/TableHead';\nimport TableCell from '@mui/material/TableCell';\nimport { Scheduler } from '../../handler';\nexport function AdvancedTableHeader(props) {\n    return (React.createElement(TableHead, null, props.columns.map((column, idx) => (React.createElement(AdvancedTableHeaderCell, { key: idx, column: column, query: props.query, setQuery: props.setQuery })))));\n}\nconst sortAscendingIcon = (React.createElement(LabIcon.resolveReact, { icon: caretUpIcon, tag: \"span\" }));\nconst sortDescendingIcon = (React.createElement(LabIcon.resolveReact, { icon: caretDownIcon, tag: \"span\" }));\nfunction AdvancedTableHeaderCell(props) {\n    const sort = props.query.sort_by;\n    const defaultSort = sort === null || sort === void 0 ? void 0 : sort[0];\n    const headerIsDefaultSort = defaultSort && defaultSort.name === props.column.sortField;\n    const isSortedAscending = headerIsDefaultSort &&\n        defaultSort &&\n        defaultSort.direction === Scheduler.SortDirection.ASC;\n    const isSortedDescending = headerIsDefaultSort &&\n        defaultSort &&\n        defaultSort.direction === Scheduler.SortDirection.DESC;\n    const sortByThisColumn = () => {\n        // If this field is not sortable, do nothing.\n        if (!props.column.sortField) {\n            return;\n        }\n        // Change the sort of this column.\n        // If not sorted at all or if sorted descending, sort ascending. If sorted ascending, sort descending.\n        const newSortDirection = isSortedAscending\n            ? Scheduler.SortDirection.DESC\n            : Scheduler.SortDirection.ASC;\n        // Set the new sort direction.\n        const newSort = {\n            name: props.column.sortField,\n            direction: newSortDirection\n        };\n        // If this field is already present in the sort list, remove it.\n        const oldSortList = sort || [];\n        const newSortList = [\n            newSort,\n            ...oldSortList.filter(item => item.name !== props.column.sortField)\n        ];\n        // Sub the new sort list in to the query.\n        props.setQuery(query => (Object.assign(Object.assign({}, query), { sort_by: newSortList })));\n    };\n    return (React.createElement(TableCell, { onClick: sortByThisColumn, sx: props.column.sortField ? { cursor: 'pointer' } : {} },\n        props.column.name,\n        isSortedAscending && sortAscendingIcon,\n        isSortedDescending && sortDescendingIcon));\n}\n","import React, { useCallback, useEffect, useState, useMemo } from 'react';\nimport { useTheme } from '@mui/material/styles';\nimport Table from '@mui/material/Table';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableBody from '@mui/material/TableBody';\nimport TablePagination from '@mui/material/TablePagination';\nimport Paper from '@mui/material/Paper';\nimport { AdvancedTableHeader } from './advanced-table-header';\nimport { useTranslator } from '../../hooks';\nimport { Alert } from '@mui/material';\nimport { getErrorMessage } from '../../util/errors';\nconst PAGE_SIZE = 25;\n/**\n * Advanced table that automatically fills remaining screen width, asynchronous\n * pagination, and loading states.\n */\nexport function AdvancedTable(props) {\n    var _a, _b;\n    const [rows, setRows] = useState();\n    const [nextToken, setNextToken] = useState();\n    const [totalCount, setTotalCount] = useState();\n    const [page, setPage] = useState(0);\n    const [maxPage, setMaxPage] = useState(0);\n    const [loading, setLoading] = useState(true);\n    const [displayError, setDisplayError] = useState(null);\n    const trans = useTranslator('jupyterlab');\n    const theme = useTheme();\n    const pageSize = (_a = props.pageSize) !== null && _a !== void 0 ? _a : PAGE_SIZE;\n    const fetchInitialRows = async () => {\n        // reset pagination state\n        setPage(0);\n        setMaxPage(0);\n        setLoading(true);\n        setDisplayError(null); // Cancel previous errors\n        props\n            .request(Object.assign(Object.assign({}, props.query), { max_items: pageSize }))\n            .then(payload => {\n            setLoading(false);\n            setRows(props.extractRows(payload));\n            setNextToken(payload === null || payload === void 0 ? void 0 : payload.next_token);\n            setTotalCount(payload === null || payload === void 0 ? void 0 : payload.total_count);\n        })\n            .catch((e) => {\n            const message = getErrorMessage(e);\n            setDisplayError(message);\n        });\n    };\n    // Fetch the initial rows asynchronously on component creation\n    // After setJobsQuery is called, force a reload.\n    useEffect(() => {\n        fetchInitialRows();\n    }, [props.query]);\n    const fetchMoreRows = async (newPage) => {\n        // Do nothing if the next token is undefined (shouldn't happen, but required for type safety)\n        if (nextToken === undefined) {\n            return false;\n        }\n        // Apply the custom token to the existing query parameters\n        setLoading(true);\n        setDisplayError(null); // Cancel previous errors\n        props\n            .request(Object.assign(Object.assign({}, props.query), { max_items: pageSize, next_token: nextToken }))\n            .then(payload => {\n            setLoading(false);\n            const newRows = props.extractRows(payload) || [];\n            if (newRows.length === 0) {\n                // no rows in next page -- leave page unchanged, disable next page\n                // button, and show an error banner\n                setNextToken(undefined);\n                setDisplayError(trans.__('Last page reached.'));\n                return;\n            }\n            // otherwise, merge the two lists of jobs and keep the next token from\n            // the new response.\n            setRows(rows => [\n                ...(rows || []),\n                ...(props.extractRows(payload) || [])\n            ]);\n            setNextToken(payload === null || payload === void 0 ? void 0 : payload.next_token);\n            setTotalCount(payload === null || payload === void 0 ? void 0 : payload.total_count);\n            setPage(newPage);\n            setMaxPage(newPage);\n        })\n            .catch((e) => {\n            const message = getErrorMessage(e);\n            setDisplayError(message);\n        });\n    };\n    const renderedRows = useMemo(() => (rows || [])\n        .slice(page * pageSize, (page + 1) * pageSize)\n        .filter(row => (props.rowFilter ? props.rowFilter(row) : true))\n        .map(row => props.renderRow(row)), [rows, props.rowFilter, props.renderRow, page, pageSize]);\n    const handlePageChange = async (e, newPage) => {\n        // first clear any display errors\n        setDisplayError(null);\n        // if newPage <= maxPage, no need to fetch more rows\n        if (newPage <= maxPage) {\n            setPage(newPage);\n            return;\n        }\n        await fetchMoreRows(newPage);\n    };\n    const onLastPage = page === maxPage && nextToken === undefined;\n    const height = (_b = props.height) !== null && _b !== void 0 ? _b : 'auto';\n    /**\n     * Renders the label to the left of the pagination buttons.\n     */\n    const labelDisplayedRows = useCallback(({ from, to, count }) => {\n        var _a;\n        if (count === -1) {\n            const loadedRows = (_a = rows === null || rows === void 0 ? void 0 : rows.length) !== null && _a !== void 0 ? _a : 0;\n            if (onLastPage) {\n                // for some reason `to` is set incorrectly on the last page in\n                // server-side pagination, so we need to build the string differently\n                // in this case.\n                return trans.__('%1–%2 of %3', from, loadedRows, loadedRows);\n            }\n            else {\n                return trans.__('%1–%2 of %3', from, to, loadedRows + (nextToken === undefined ? '' : '+'));\n            }\n        }\n        else {\n            return trans.__('%1–%2 of %3', from, to, count);\n        }\n    }, [rows, onLastPage, trans]);\n    if (rows && !rows.length) {\n        return (React.createElement(\"p\", { className: 'jp-notebook-job-list-empty' }, props.emptyRowMessage));\n    }\n    const tableDiv = (React.createElement(\"div\", { style: height === 'auto' ? { flex: 1 } : { maxHeight: height } },\n        React.createElement(TableContainer, { component: Paper, sx: Object.assign({ height: '100%' }, (loading ? { pointerEvents: 'none', opacity: 0.5 } : {})) },\n            React.createElement(Table, { stickyHeader: true },\n                React.createElement(AdvancedTableHeader, { columns: props.columns, query: props.query, setQuery: props.setQuery }),\n                React.createElement(TableBody, null, renderedRows)),\n            React.createElement(TablePagination, { component: \"div\", sx: {\n                    position: 'sticky',\n                    bottom: 0,\n                    backgroundColor: theme.palette.background.paper,\n                    borderTop: `1px solid ${theme.palette.divider}`\n                }, count: totalCount !== null && totalCount !== void 0 ? totalCount : -1, labelDisplayedRows: labelDisplayedRows, page: page, onPageChange: handlePageChange, nextIconButtonProps: {\n                    disabled: onLastPage\n                }, rowsPerPage: pageSize, rowsPerPageOptions: [pageSize] }))));\n    return (React.createElement(React.Fragment, null,\n        displayError && React.createElement(Alert, { severity: \"error\" }, displayError),\n        tableDiv));\n}\n","import React from 'react';\nimport { Stack } from '@mui/material';\nexport function ButtonBar(props) {\n    return (React.createElement(Stack, { direction: \"row\", gap: 2, justifyContent: \"flex-end\", flexWrap: 'wrap' }, props.children));\n}\n","import React from 'react';\nexport function Cluster(props) {\n    let cls = 'jp-jobs-Cluster';\n    cls += ` justify-content-${props.justifyContent || 'flex-start'}`;\n    cls += ` align-items-${props.alignItems || 'center'}`;\n    cls += ` gap-${props.gap || 1}`;\n    return React.createElement(\"div\", { className: cls }, props.children);\n}\n","import React from 'react';\nimport { InputLabel, MenuItem, Select } from '@mui/material';\nexport function ComputeTypePicker(props) {\n    const environmentObj = props.environmentList.find(env => env.name === props.environment);\n    if (!environmentObj || !environmentObj.compute_types) {\n        return null;\n    }\n    const computeTypes = environmentObj.compute_types;\n    const labelId = `${props.id}-label`;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(InputLabel, { id: labelId }, props.label),\n        React.createElement(Select, { labelId: labelId, name: props.name, id: props.id, onChange: props.onChange, value: props.value, MenuProps: {\n                PaperProps: {\n                    sx: {\n                        maxHeight: '20em'\n                    }\n                }\n            } }, computeTypes.map((ct, idx) => (React.createElement(MenuItem, { value: ct, key: idx }, ct))))));\n}\n","import { Box, Button, Chip, IconButton } from '@mui/material';\nimport React, { useState } from 'react';\nimport { useTranslator } from '../hooks';\nimport CloseIcon from '@mui/icons-material/Close';\nexport function ConfirmButton(props) {\n    const [clicked, setClicked] = useState(false);\n    const [confirmed, setConfirmed] = useState(false);\n    // For Safari compatibility, also apply this to the \"mouseDown\" event, since the\n    // \"click\" event doesn't fire when the user clicks or taps on a button made visible\n    // in this way\n    const clickHandler = (e) => {\n        props.onConfirm();\n        if (props.remainAfterConfirmation) {\n            setConfirmed(true);\n        }\n    };\n    return (React.createElement(Box, { sx: { width: '6em' } }, clicked ? (props.remainAfterConfirmation && confirmed ? (React.createElement(Chip, { label: props.remainText })) : (React.createElement(Button, { variant: \"contained\", color: \"error\", title: props.name, onClick: clickHandler, onBlur: _ => setClicked(false), style: { visibility: clicked ? 'visible' : 'hidden' }, autoFocus: true }, props.confirmationText))) : (React.createElement(IconButton, { title: props.name, onClick: _ => setClicked(true) }, props.icon))));\n}\nexport function ConfirmDeleteButton(props) {\n    const trans = useTranslator('jupyterlab');\n    const buttonTitle = props.name\n        ? trans.__('Delete \"%1\"', props.name)\n        : trans.__('Delete job');\n    return (React.createElement(ConfirmButton, { name: buttonTitle, onConfirm: props.clickHandler, confirmationText: trans.__('Delete'), icon: React.createElement(CloseIcon, { fontSize: \"small\" }) }));\n}\n","import React, { useState } from 'react';\nimport { Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, useTheme } from '@mui/material';\nimport { useTranslator } from '../hooks';\nexport const ConfirmDialogButton = (props) => {\n    var _a;\n    const [open, setOpen] = useState(false);\n    const trans = useTranslator('jupyterlab');\n    const theme = useTheme();\n    const handleClose = () => {\n        setOpen(false);\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Button, { variant: (_a = props.variant) !== null && _a !== void 0 ? _a : 'contained', color: props.errorColor ? 'error' : 'primary', onClick: _ => setOpen(true) }, props.title),\n        React.createElement(Dialog, { open: open, onClose: handleClose },\n            React.createElement(DialogTitle, null, props.title),\n            React.createElement(DialogContent, null,\n                React.createElement(DialogContentText, null, props.dialogText)),\n            React.createElement(DialogActions, null,\n                React.createElement(Button, { variant: \"contained\", sx: { backgroundColor: theme.palette.grey[600] }, onClick: handleClose, autoFocus: true }, trans.__('Cancel')),\n                React.createElement(Button, { variant: \"contained\", color: \"error\", onClick: async (_) => {\n                        handleClose();\n                        await props.onConfirm();\n                    } }, props.dialogConfirmText)))));\n};\nexport const ConfirmDialogDeleteButton = (props) => {\n    const trans = useTranslator('jupyterlab');\n    return (React.createElement(ConfirmDialogButton, { onConfirm: props.handleDelete, title: props.title, dialogText: props.dialogText, dialogConfirmText: trans.__('Delete'), pendingConfirmText: trans.__('Deleting'), errorColor: true }));\n};\nexport const ConfirmDialogStopButton = (props) => {\n    const trans = useTranslator('jupyterlab');\n    return (React.createElement(ConfirmDialogButton, { onConfirm: props.handleStop, title: props.title, dialogText: props.dialogText, dialogConfirmText: trans.__('Stop'), pendingConfirmText: trans.__('Stopping'), variant: \"outlined\" }));\n};\n","import React from 'react';\nimport { FormControlLabel, InputLabel, Radio, RadioGroup } from '@mui/material';\nimport Stack from '@mui/system/Stack';\nimport { useEventLogger, useTranslator } from '../hooks';\nimport { ScheduleInputs } from './schedule-inputs';\nexport function CreateScheduleOptions(props) {\n    const trans = useTranslator('jupyterlab');\n    const labelId = `${props.id}-label`;\n    const log = useEventLogger();\n    const handleScheduleOptionsChange = (event, value) => {\n        log(`create-job.job-type.${value === 'Job' ? 'run-now' : 'run-on-schedule'}`);\n        const name = event.target.name;\n        props.handleModelChange(Object.assign(Object.assign({}, props.model), { [name]: value }));\n    };\n    return (React.createElement(Stack, { spacing: 4 },\n        React.createElement(InputLabel, { id: labelId }, props.label),\n        React.createElement(RadioGroup, { \"aria-labelledby\": labelId, name: props.name, value: props.model.createType, onChange: handleScheduleOptionsChange },\n            React.createElement(FormControlLabel, { value: \"Job\", control: React.createElement(Radio, null), label: trans.__('Run now') }),\n            React.createElement(FormControlLabel, { value: \"JobDefinition\", control: React.createElement(Radio, null), label: trans.__('Run on a schedule') })),\n        props.model.createType === 'JobDefinition' && (React.createElement(ScheduleInputs, { idPrefix: `${props.id}-definition-`, model: props.model, handleModelChange: props.handleModelChange, errors: props.errors, handleErrorsChange: props.handleErrorsChange, utcOnly: props.utcOnly }))));\n}\n","import React from 'react';\nimport { FormControl, InputLabel, MenuItem, Select } from '@mui/material';\nimport { useTranslator } from '../hooks';\nexport function EnvironmentPicker(props) {\n    const trans = useTranslator('jupyterlab');\n    if (props.environmentList.length === 0) {\n        return React.createElement(\"em\", null, trans.__('Loading …'));\n    }\n    const labelId = `${props.id}-label`;\n    // If exactly one environment is present, do not display an environment UI element.\n    if (props.environmentList.length === 1) {\n        return null;\n    }\n    return (React.createElement(FormControl, null,\n        React.createElement(InputLabel, { id: labelId }, props.label),\n        React.createElement(Select, { labelId: labelId, label: props.label, name: props.name, id: props.id, onChange: props.onChange, value: props.value }, props.environmentList.map((env, idx) => (React.createElement(MenuItem, { value: env.label, title: env.description, key: idx }, env.name))))));\n}\n","import { Alert, AlertTitle, Stack, Typography } from '@mui/material';\nimport React from 'react';\nexport class ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { hasError: false };\n    }\n    componentDidCatch(error, errorInfo) {\n        // errorInfo has full stack trace, which we are not using\n        this.setState({ hasError: true, error });\n    }\n    render() {\n        let errorDetail;\n        if (typeof this.state.error === 'string') {\n            errorDetail = this.state.error;\n        }\n        else if (this.state.error instanceof Error) {\n            errorDetail = this.state.error.message;\n        }\n        if (this.state.hasError) {\n            return (React.createElement(\"div\", { className: \"jp-error-boundary\" },\n                React.createElement(Stack, { spacing: 4 },\n                    React.createElement(Alert, { severity: \"error\" },\n                        React.createElement(AlertTitle, null, this.props.alertTitle),\n                        this.props.alertMessage),\n                    errorDetail && (React.createElement(React.Fragment, null,\n                        React.createElement(Typography, { variant: \"h1\" }, this.props.detailTitle),\n                        React.createElement(\"pre\", null, errorDetail))))));\n        }\n        return this.props.children;\n    }\n}\n","import React from 'react';\nimport { useTranslator } from '../hooks';\nimport { Link } from '@mui/material';\nexport function FilesDirectoryLink(props) {\n    const trans = useTranslator('jupyterlab');\n    return (React.createElement(Link, { href: `/lab/tree/${props.jobFile.file_path}`, title: trans.__('Open output folder in file browser'), onClick: e => {\n            e.preventDefault();\n            props.app.commands.execute('filebrowser:open-path', {\n                path: props.jobFile.file_path\n            });\n        } }, trans.__('Files')));\n}\n","import React from 'react';\nexport function Heading(props) {\n    switch (props.level) {\n        case 1:\n            return React.createElement(\"h1\", { className: \"jp-jobs-Heading\" }, props.children);\n        case 2:\n            return React.createElement(\"h2\", { className: \"jp-jobs-Heading\" }, props.children);\n        case 3:\n            return React.createElement(\"h3\", { className: \"jp-jobs-Heading\" }, props.children);\n        default:\n            return React.createElement(\"h1\", { className: \"jp-jobs-Heading\" }, props.children);\n    }\n}\n","import React from 'react';\nimport { addIcon, closeIcon } from '@jupyterlab/ui-components';\nimport { IconButton } from '@mui/material';\n// Avoid extra vertical padding to force icon to be a square inside a circle\nconst zeroLineHeight = { lineHeight: 0 };\nexport function DeleteButton(props) {\n    return (React.createElement(IconButton, { \"aria-label\": \"delete\", onClick: props.onClick, title: props.title, sx: Object.assign(Object.assign({}, zeroLineHeight), props.addedStyle) },\n        React.createElement(closeIcon.react, null)));\n}\nexport function AddButton(props) {\n    return (React.createElement(IconButton, { onClick: props.onClick, title: props.title, sx: Object.assign(Object.assign({}, zeroLineHeight), props.addedStyle) },\n        React.createElement(addIcon.react, null)));\n}\n","// This file is based on iconimports.ts in @jupyterlab/ui-components, but is manually generated.\nimport { LabIcon } from '@jupyterlab/ui-components';\nimport calendarAddOnSvgstr from '../../style/icons/calendar-add-on.svg';\nimport calendarMonthSvgStr from '../../style/icons/calendar-month.svg';\nimport eventNoteSvgstr from '../../style/icons/event-note.svg';\nexport const calendarAddOnIcon = new LabIcon({\n    name: 'jupyterlab-scheduler:calendar-add-on',\n    svgstr: calendarAddOnSvgstr\n});\nexport const calendarMonthIcon = new LabIcon({\n    name: 'jupyterlab-scheduler:calendar-month',\n    svgstr: calendarMonthSvgStr\n});\nexport const eventNoteIcon = new LabIcon({\n    name: 'jupyterlab-scheduler:event-note',\n    svgstr: eventNoteSvgstr\n});\n","import React from 'react';\nimport { useTranslator } from '../hooks';\nimport { FormControl, InputLabel, OutlinedInput, FormHelperText } from '@mui/material';\nexport const InputFileSnapshot = (props) => {\n    const trans = useTranslator('jupyterlab');\n    return (React.createElement(FormControl, { sx: { border: 'unset' } },\n        React.createElement(InputLabel, { htmlFor: \"jp-input-file-snapshot-id\" }, trans.__('Input file snapshot')),\n        React.createElement(OutlinedInput, { id: \"jp-input-file-snapshot-id\", inputProps: { className: 'jp-input-file-snapshot' }, label: trans.__('Input file snapshot'), value: props.inputFileSnapshot, \"aria-describedby\": \"jp-input-file-snapshot-helper-text\" }),\n        React.createElement(FormHelperText, { id: \"jp-input-file-snapshot-helper-text\" }, trans.__('Drag a file from the file browser and drop it here to update the input file snapshot'))));\n};\n","import React from 'react';\nimport { useEventLogger, useTranslator } from '../hooks';\nimport { Checkbox, FormControlLabel, FormGroup, FormHelperText } from '@mui/material';\nexport function PackageInputFolderControl(props) {\n    const trans = useTranslator('jupyterlab');\n    const log = useEventLogger();\n    const inputFilePath = props.inputFile.split('/');\n    inputFilePath.pop();\n    let helperText;\n    if (inputFilePath.length) {\n        const inputFolder = `/${inputFilePath.join('/')}`;\n        helperText = trans.__('The scheduled job will have access to all files under %1', inputFolder);\n    }\n    else {\n        helperText = trans.__(\"The scheduled job will have access to all files under the input file's folder\");\n    }\n    return (React.createElement(FormGroup, null,\n        React.createElement(FormControlLabel, { control: React.createElement(Checkbox, { onChange: event => {\n                    const checkboxEvent = event.target.checked ? 'check' : 'uncheck';\n                    log(`create-job.options.package_input_folder.${checkboxEvent}`);\n                    props.onChange(event);\n                }, name: 'packageInputFolder' }), label: trans.__('Run job with input folder'), \"aria-describedby\": \"jp-package-input-folder-helper-text\" }),\n        React.createElement(FormHelperText, { id: \"jp-package-input-folder-helper-text\" }, helperText)));\n}\n","import React from 'react';\nimport cronstrue from 'cronstrue';\nimport { PathExt } from '@jupyterlab/coreutils';\nimport PauseIcon from '@mui/icons-material/Pause';\nimport PlayArrowIcon from '@mui/icons-material/PlayArrow';\nimport { IconButton, Link } from '@mui/material';\nimport Stack from '@mui/material/Stack';\nimport TableRow from '@mui/material/TableRow';\nimport TableCell from '@mui/material/TableCell';\nimport { useEventLogger, useTranslator } from '../hooks';\nimport { ConfirmDeleteButton } from './confirm-buttons';\nimport { getErrorMessage } from '../util/errors';\nfunction CreatedAt(props) {\n    const create_date = props.job.create_time\n        ? new Date(props.job.create_time)\n        : null;\n    const create_display_date = create_date\n        ? create_date.toLocaleString()\n        : null;\n    return React.createElement(React.Fragment, null, create_display_date);\n}\nfunction ScheduleSummary(props) {\n    if (props.schedule === undefined) {\n        return null;\n    }\n    return React.createElement(React.Fragment, null, cronstrue.toString(props.schedule));\n}\nfunction PauseButton(props) {\n    const trans = useTranslator('jupyterlab');\n    if (!props.jobDef.active) {\n        return null;\n    }\n    const buttonTitle = props.jobDef.name\n        ? trans.__('Pause \"%1\"', props.jobDef.name)\n        : trans.__('Pause job definition');\n    return (React.createElement(IconButton, { onClick: props.clickHandler, title: buttonTitle },\n        React.createElement(PauseIcon, { fontSize: \"small\" })));\n}\nfunction ResumeButton(props) {\n    const trans = useTranslator('jupyterlab');\n    if (props.jobDef.active) {\n        return null;\n    }\n    const buttonTitle = props.jobDef.name\n        ? trans.__('Resume \"%1\"', props.jobDef.name)\n        : trans.__('Resume job definition');\n    return (React.createElement(IconButton, { onClick: props.clickHandler, title: buttonTitle },\n        React.createElement(PlayArrowIcon, { fontSize: \"small\" })));\n}\nexport function buildJobDefinitionRow(jobDef, app, openJobDefinitionDetail, deleteRow, forceReload, trans, ss, handleApiError) {\n    const log = useEventLogger();\n    const cellContents = [\n        // name\n        React.createElement(Link, { onClick: () => {\n                log('job-definition-list.open-detail');\n                openJobDefinitionDetail(jobDef.job_definition_id);\n            }, title: `Open detail view for \"${jobDef.name}\"` }, jobDef.name),\n        PathExt.basename(jobDef.input_filename),\n        React.createElement(CreatedAt, { job: jobDef }),\n        React.createElement(ScheduleSummary, { schedule: jobDef.schedule }),\n        jobDef.active ? trans.__('Active') : trans.__('Paused'),\n        React.createElement(Stack, { spacing: 1, direction: \"row\" },\n            React.createElement(PauseButton, { jobDef: jobDef, clickHandler: async () => {\n                    log('job-definition-list.pause');\n                    handleApiError(null);\n                    ss.pauseJobDefinition(jobDef.job_definition_id)\n                        .then(_ => {\n                        forceReload();\n                    })\n                        .catch((e) => {\n                        const message = getErrorMessage(e);\n                        handleApiError(message);\n                    });\n                } }),\n            React.createElement(ResumeButton, { jobDef: jobDef, clickHandler: async () => {\n                    log('job-definition-list.resume');\n                    handleApiError(null);\n                    ss.resumeJobDefinition(jobDef.job_definition_id)\n                        .then(_ => {\n                        forceReload();\n                    })\n                        .catch((e) => {\n                        const message = getErrorMessage(e);\n                        handleApiError(message);\n                    });\n                } }),\n            React.createElement(ConfirmDeleteButton, { name: jobDef.name, clickHandler: async () => {\n                    log('job-definition-list.delete');\n                    handleApiError(null);\n                    ss.deleteJobDefinition(jobDef.job_definition_id)\n                        .then(_ => {\n                        deleteRow(jobDef.job_definition_id);\n                    })\n                        .catch((e) => {\n                        const message = getErrorMessage(e);\n                        handleApiError(message);\n                    });\n                } }))\n    ];\n    return (React.createElement(TableRow, { key: jobDef.job_definition_id }, cellContents.map((cellContent, idx) => (React.createElement(TableCell, { key: `${jobDef.job_definition_id}-${idx}` }, cellContent)))));\n}\n","import React from 'react';\nimport { useEventLogger, useTranslator } from '../hooks';\nimport { Link } from '@mui/material';\nimport { FilesDirectoryLink } from './files-directory-link';\nexport function JobFileLink(props) {\n    const trans = useTranslator('jupyterlab');\n    if (!props.jobFile.file_path) {\n        return null;\n    }\n    const log = useEventLogger();\n    const fileBaseName = props.jobFile.file_path.split('/').pop();\n    const title = props.jobFile.file_format === 'input'\n        ? trans.__('Open input file \"%1\"', fileBaseName)\n        : trans.__('Open output file \"%1\"', fileBaseName);\n    if (props.jobFile.file_format === 'files') {\n        return React.createElement(FilesDirectoryLink, { jobFile: props.jobFile, app: props.app });\n    }\n    return (React.createElement(Link, { key: props.jobFile.file_format, href: `/lab/tree/${props.jobFile.file_path}`, title: title, onClick: (e) => {\n            e.preventDefault();\n            if (props.parentComponentName) {\n                log(`${props.parentComponentName}.${props.jobFile.file_format === 'input'\n                    ? 'open-input-file'\n                    : 'open-output-file'}`);\n            }\n            props.app.commands.execute('docmanager:open', {\n                path: props.jobFile.file_path\n            });\n        }, style: { paddingRight: '1em' } }, props.children || props.jobFile.display_name));\n}\n","import React, { useState } from 'react';\nimport { ConfirmDeleteButton, ConfirmButton } from './confirm-buttons';\nimport { JobFileLink } from './job-file-link';\nimport { CommandIDs } from '..';\nimport { useEventLogger, useTranslator } from '../hooks';\nimport DownloadIcon from '@mui/icons-material/Download';\nimport StopIcon from '@mui/icons-material/Stop';\nimport { IconButton, Stack, Link, TableCell, TableRow } from '@mui/material';\nimport { getErrorMessage } from '../util/errors';\nfunction StopButton(props) {\n    const trans = useTranslator('jupyterlab');\n    const log = useEventLogger();\n    const buttonTitle = props.job.name\n        ? trans.__('Stop \"%1\"', props.job.name)\n        : trans.__('Stop job');\n    return (React.createElement(\"div\", { style: props.job.status !== 'IN_PROGRESS' ? { visibility: 'hidden' } : {} },\n        React.createElement(ConfirmButton, { name: buttonTitle, onConfirm: () => {\n                log('job-list.stop-confirm');\n                props.clickHandler();\n            }, confirmationText: trans.__('Stop'), icon: React.createElement(StopIcon, { fontSize: \"small\" }), remainAfterConfirmation: true, remainText: trans.__('Stopping') })));\n}\nfunction Timestamp(props) {\n    const create_date = props.job.create_time\n        ? new Date(props.job.create_time)\n        : null;\n    const create_display_date = create_date\n        ? create_date.toLocaleString()\n        : null;\n    return React.createElement(React.Fragment, null, create_display_date);\n}\nfunction JobFiles(props) {\n    if (!(props.job.status === 'COMPLETED' || props.job.status === 'FAILED')) {\n        return null;\n    }\n    return (React.createElement(React.Fragment, null, props.job.job_files\n        .filter(jobFile => jobFile.file_format !== 'input' && jobFile.file_path)\n        .map(jobFile => (React.createElement(JobFileLink, { jobFile: jobFile, app: props.app, parentComponentName: \"jobs-list\" })))));\n}\nfunction DownloadFilesButton(props) {\n    const [downloading, setDownloading] = useState(false);\n    const trans = useTranslator('jupyterlab');\n    const log = useEventLogger();\n    return (React.createElement(IconButton, { \"aria-label\": \"download\", title: trans.__('Download output files for \"%1\"', props.job.name), disabled: downloading, onClick: async () => {\n            setDownloading(true);\n            log('jobs-list.download');\n            props.app.commands\n                .execute(CommandIDs.downloadFiles, {\n                id: props.job.job_id,\n                redownload: false\n            })\n                .then(_ => new Promise(res => setTimeout(res, 5000)).then(_ => {\n                log('jobs-list.download');\n                setDownloading(false);\n                props.reload();\n            }))\n                .catch((e) => {\n                const message = getErrorMessage(e);\n                props.setDisplayError(message);\n            });\n        } },\n        React.createElement(DownloadIcon, null)));\n}\nexport function buildJobRow(job, environmentList, app, showCreateJob, deleteRow, translateStatus, showDetailView, reload, setDisplayError) {\n    const inputFile = job.job_files.find(jobFile => jobFile.file_format === 'input' && jobFile.file_path);\n    const trans = useTranslator('jupyterlab');\n    const log = useEventLogger();\n    const cellContents = [\n        React.createElement(Link, { onClick: () => {\n                log('jobs-list.open-detail');\n                showDetailView(job.job_id);\n            }, title: trans.__('Open detail view for \"%1\"', job.name) }, job.name),\n        inputFile ? (React.createElement(JobFileLink, { app: app, jobFile: inputFile, parentComponentName: \"jobs-list\" }, job.input_filename)) : (job.input_filename),\n        React.createElement(React.Fragment, null,\n            !job.downloaded &&\n                (job.status === 'COMPLETED' || job.status === 'FAILED') && (React.createElement(DownloadFilesButton, { app: app, job: job, reload: reload, setDisplayError: setDisplayError })),\n            React.createElement(JobFiles, { job: job, app: app })),\n        React.createElement(Timestamp, { job: job }),\n        translateStatus(job.status),\n        React.createElement(Stack, { spacing: 1, direction: \"row\" },\n            React.createElement(ConfirmDeleteButton, { name: job.name, clickHandler: () => {\n                    log('jobs-list.delete');\n                    app.commands\n                        .execute(CommandIDs.deleteJob, {\n                        id: job.job_id\n                    })\n                        .then(_ => deleteRow(job.job_id))\n                        .catch((e) => {\n                        const message = getErrorMessage(e);\n                        setDisplayError(message);\n                    });\n                } }),\n            React.createElement(StopButton, { job: job, clickHandler: () => {\n                    log('jobs-list.stop');\n                    app.commands\n                        .execute(CommandIDs.stopJob, {\n                        id: job.job_id\n                    })\n                        .catch((e) => {\n                        const message = getErrorMessage(e);\n                        setDisplayError(message);\n                    });\n                } }))\n    ];\n    return (React.createElement(TableRow, { key: job.job_id }, cellContents.map((cellContent, idx) => (React.createElement(TableCell, { key: `${job.job_id}-${idx}` }, cellContent)))));\n}\n","import React from 'react';\nexport const LabeledValue = (props) => {\n    const { label, value, style, helperText, InputProps } = props;\n    return (React.createElement(\"div\", { id: props.id, style: Object.assign({ display: 'flex', flexDirection: 'column' }, style) },\n        React.createElement(\"span\", { className: \"jp-jobs-LabeledValue-label\" }, label),\n        React.createElement(\"div\", { style: { display: 'flex', flexDirection: 'column' } },\n            React.createElement(\"div\", { style: {\n                    display: 'flex',\n                    flexDirection: 'row',\n                    alignItems: 'center'\n                } }, InputProps === null || InputProps === void 0 ? void 0 :\n                InputProps.startAdornment,\n                React.createElement(\"span\", { className: \"jp-jobs-LabeledValue-value\" }, value ? value : !(InputProps === null || InputProps === void 0 ? void 0 : InputProps.startAdornment) && '\\u2014')),\n            React.createElement(\"span\", { className: \"jp-jobs-LabeledValue-label\", style: { maxWidth: 'fit-content' } }, helperText))));\n};\n","import React from 'react';\nimport { Checkbox, FormControlLabel, InputLabel } from '@mui/material';\nimport { Stack } from './stack';\nimport { Cluster } from './cluster';\nexport function outputFormatsForEnvironment(environmentList, environment) {\n    const environmentObj = environmentList.find(env => env.name === environment);\n    if (!environmentObj || !environmentObj['output_formats']) {\n        return null;\n    }\n    return environmentObj['output_formats'];\n}\nexport function OutputFormatPicker(props) {\n    const outputFormats = outputFormatsForEnvironment(props.environmentList, props.environment);\n    // Don't display anything, not even the label, if there are no output formats\n    if (outputFormats === null || outputFormats.length === 0) {\n        return null;\n    }\n    return (React.createElement(Stack, { size: 2 },\n        React.createElement(InputLabel, null, props.label),\n        React.createElement(Cluster, { gap: 3, justifyContent: \"flex-start\" }, outputFormats.map((of, idx) => (React.createElement(FormControlLabel, { key: idx, control: React.createElement(Checkbox, { checked: props.value.some(sof => of.name === sof), id: `${props.id}-${of.name}`, value: of.name, onChange: props.onChange }), label: of.label }))))));\n}\n","import React from 'react';\nimport { InputLabel, TextField } from '@mui/material';\nimport Stack from '@mui/system/Stack';\nimport { Cluster } from '../components/cluster';\nimport { useTranslator } from '../hooks';\nimport { AddButton, DeleteButton } from './icon-buttons';\nexport function ParametersPicker(props) {\n    const trans = useTranslator('jupyterlab');\n    const checkParameterIndex = (idx) => {\n        const param = props.value[idx];\n        // If the parameter is not defined (such as if it was just created) then treat it\n        // as invalid.\n        const nameInvalid = param === undefined ? true : param.name === '';\n        const valueInvalid = param === undefined ? true : param.value === '';\n        props.handleErrorsChange(Object.assign(Object.assign({}, props.errors), { [`parameter-${idx}-name`]: nameInvalid\n                ? trans.__('No name specified for this parameter.')\n                : '', [`parameter-${idx}-value`]: valueInvalid\n                ? trans.__('No value specified for this parameter.')\n                : '' }));\n    };\n    const checkParameterElement = (e) => {\n        const paramInputName = e.name;\n        const paramMatch = paramInputName.match(/^parameter-(\\d+)/);\n        if (!paramMatch || paramMatch.length < 2) {\n            return; // Invalid parameter name; should not happen\n        }\n        checkParameterIndex(parseInt(paramMatch[1]));\n    };\n    return (React.createElement(Stack, { spacing: 2 },\n        React.createElement(InputLabel, null, props.label),\n        props.value.map((param, paramIdx) => {\n            var _a, _b;\n            const nameHasError = !!props.errors[`parameter-${paramIdx}-name`];\n            const valueHasError = !!props.errors[`parameter-${paramIdx}-value`];\n            return (React.createElement(Cluster, { key: paramIdx, justifyContent: \"flex-start\", alignItems: \"start\" },\n                React.createElement(TextField, { name: `parameter-${paramIdx}-name`, value: param.name, type: \"text\", placeholder: trans.__('Name'), onBlur: e => checkParameterElement(e.target), error: nameHasError, helperText: (_a = props.errors[`parameter-${paramIdx}-name`]) !== null && _a !== void 0 ? _a : '', onChange: props.onChange, FormHelperTextProps: { sx: { maxWidth: 'fit-content' } }, style: {\n                        flexGrow: 1\n                    } }),\n                React.createElement(TextField, { name: `parameter-${paramIdx}-value`, value: param.value, type: \"text\", placeholder: trans.__('Value'), onBlur: e => checkParameterElement(e.target), error: valueHasError, helperText: (_b = props.errors[`parameter-${paramIdx}-value`]) !== null && _b !== void 0 ? _b : '', onChange: props.onChange, FormHelperTextProps: { sx: { maxWidth: 'fit-content' } }, style: {\n                        flexGrow: 1\n                    } }),\n                React.createElement(DeleteButton, { onClick: () => props.removeParameter(paramIdx), title: trans.__('Delete this parameter'), addedStyle: { marginTop: '14px' } })));\n        }),\n        React.createElement(Cluster, { justifyContent: \"flex-start\" },\n            React.createElement(AddButton, { onClick: (e) => {\n                    // Assume the parameter will be added at the end.\n                    const newParamIdx = props.value.length;\n                    props.addParameter();\n                    checkParameterIndex(newParamIdx);\n                    return false;\n                }, title: trans.__('Add new parameter') }))));\n}\n","import React, { useEffect, useMemo } from 'react';\nimport cronstrue from 'cronstrue';\nimport tzdata from 'tzdata';\nimport { Autocomplete, FormControl, FormHelperText, InputLabel, MenuItem, Select, TextField } from '@mui/material';\nimport { useTranslator } from '../hooks';\nimport { defaultScheduleFields } from '../model';\nconst emptyScheduleErrors = {\n    schedule: '',\n    scheduleClock: '',\n    scheduleMinute: '',\n    scheduleMonthDay: '',\n    scheduleWeekDay: ''\n};\nconst fieldKeys = [\n    'schedule',\n    'scheduleClock',\n    'scheduleMinute',\n    'scheduleMonthDay',\n    'scheduleWeekDay'\n];\n/**\n * Maps schedule field keys to the intervals in which they may appear.\n */\nconst intervalsByFieldKey = {\n    schedule: ['custom'],\n    scheduleClock: ['day', 'week', 'weekday', 'month'],\n    scheduleMinute: ['hour'],\n    scheduleMonthDay: ['month'],\n    scheduleWeekDay: ['week']\n};\nexport function ScheduleInputs(props) {\n    const trans = useTranslator('jupyterlab');\n    const validator = useMemo(() => new ScheduleValidator(trans), [trans]);\n    const timezones = useMemo(() => Object.keys(tzdata.zones).sort(), []);\n    const timezoneLabel = trans.__('Time zone');\n    // maps validator method to each field keys\n    const validatorsByFieldKey = useMemo(() => ({\n        schedule: validator.validateCron.bind(validator),\n        scheduleClock: validator.validateClock.bind(validator),\n        scheduleMinute: validator.validateMinute.bind(validator),\n        scheduleWeekDay: validator.validateWeekDay.bind(validator),\n        scheduleMonthDay: validator.validateMonthDay.bind(validator)\n    }), [validator]);\n    // validates all schedule fields\n    const validateScheduleFields = (model) => {\n        const newErrors = Object.assign({}, props.errors);\n        for (const fieldKey of fieldKeys) {\n            const validator = validatorsByFieldKey[fieldKey];\n            // if this field doesn't have a validator, or if the current schedule\n            // interval doesn't render this field, then clear validation errors.\n            if (!validator ||\n                !intervalsByFieldKey[fieldKey].includes(model.scheduleInterval)) {\n                newErrors[fieldKey] = '';\n                continue;\n            }\n            // otherwise validate the current field.\n            newErrors[fieldKey] = validator(model[fieldKey]);\n        }\n        props.handleErrorsChange(newErrors);\n    };\n    /**\n     * Effect:\n     * - whenever component is mounted, validate all schedule fields\n     * - whenever component is unmounted, remove all schedule fields from errors object\n     */\n    useEffect(() => {\n        validateScheduleFields(props.model);\n        return () => {\n            props.handleErrorsChange(Object.assign(Object.assign({}, props.errors), emptyScheduleErrors));\n        };\n    }, []);\n    /**\n     * Effect: compute derived state on change in fields state\n     * - when using easy scheduling, props.model.schedule is derived from the other fields\n     * - otherwise, the other fields are derived from props.model.schedule\n     */\n    useEffect(() => {\n        if (props.model.scheduleInterval === 'custom') {\n            const [minute, hour, monthDay, , weekDay] = parseCron(props.model.schedule);\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { scheduleClock: toClock(hour, minute), scheduleMinute: `${minute}`, scheduleMonthDay: `${monthDay}`, scheduleWeekDay: `${weekDay}` }));\n        }\n        else {\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { schedule: toCron(props.model) }));\n        }\n    }, [\n        props.model.scheduleInterval,\n        props.model.schedule,\n        props.model.scheduleMinute,\n        props.model.scheduleClock,\n        props.model.scheduleMonthDay,\n        props.model.scheduleWeekDay\n    ]);\n    const handleChange = (e) => {\n        const newModel = Object.assign(Object.assign({}, props.model), { [e.target.name]: e.target.value });\n        props.handleModelChange(newModel);\n        validateScheduleFields(newModel);\n    };\n    const handleTimezoneChange = (e, value) => {\n        props.handleModelChange(Object.assign(Object.assign({}, props.model), { timezone: value !== null && value !== void 0 ? value : defaultScheduleFields.timezone }));\n    };\n    const intervalLabelId = `${props.idPrefix}interval-label`;\n    const intervalLabelText = trans.__('Interval');\n    const dayOfWeekLabelId = `${props.idPrefix}dayofweek-label`;\n    const dayOfWeekText = trans.__('Day of the week');\n    const monthDayHelperText = useMemo(() => {\n        const monthDay = parseInt(props.model.scheduleMonthDay);\n        return !isNaN(monthDay) && monthDay > 28\n            ? trans.__('The job will not run in months with fewer than %1 days', props.model.scheduleMonthDay)\n            : '1–31';\n    }, [trans, props.model.scheduleMonthDay]);\n    const clockHelperText = useMemo(() => {\n        const [hours, minutes] = parseClock(props.model.scheduleClock);\n        if (hours === undefined || minutes === undefined) {\n            return trans.__('00:00-23:59');\n        }\n        const displayHours = hours % 12 === 0 ? '12' : hours % 12;\n        const displayMinutes = minutes < 10 ? '0' + minutes : minutes;\n        if (hours < 12) {\n            return trans.__('%1:%2 AM', displayHours, displayMinutes);\n        }\n        else {\n            return trans.__('%1:%2 PM', displayHours, displayMinutes);\n        }\n    }, [trans, props.model.scheduleClock]);\n    const scheduleHelperText = useMemo(() => {\n        try {\n            return cronstrue.toString(props.model.schedule);\n        }\n        catch (_a) {\n            return '';\n        }\n    }, [props.model.schedule]);\n    const tzOffsetHours = new Date().getTimezoneOffset() / 60;\n    let tzMessage;\n    if (tzOffsetHours === 0) {\n        tzMessage = trans.__('Specify time in UTC (local time)');\n    }\n    else if (tzOffsetHours === -1) {\n        tzMessage = trans.__('Specify time in UTC (subtract 1 hour from local time)');\n    }\n    else if (tzOffsetHours < 0) {\n        tzMessage = trans.__('Specify time in UTC (subtract %1 hours from local time)', -tzOffsetHours);\n    }\n    else if (tzOffsetHours === 1) {\n        tzMessage = trans.__('Specify time in UTC (add 1 hour to local time)');\n    }\n    else if (tzOffsetHours > 0) {\n        tzMessage = trans.__('Specify time in UTC (add %1 hours to local time)', tzOffsetHours);\n    }\n    const timezonePicker = props.utcOnly ? (React.createElement(\"p\", null,\n        tzMessage,\n        React.createElement(\"br\", null),\n        trans.__('Schedules in UTC are affected by daylight saving time or summer time changes'))) : (React.createElement(Autocomplete, { id: `${props.idPrefix}timezone`, options: timezones, value: props.model.timezone, onChange: handleTimezoneChange, renderInput: (params) => (React.createElement(TextField, Object.assign({}, params, { name: \"timezone\", label: timezoneLabel, variant: \"outlined\" }))) }));\n    const clockInput = (React.createElement(TextField, { label: trans.__('Time'), name: \"scheduleClock\", value: props.model.scheduleClock, onChange: handleChange, error: !!props.errors.scheduleClock, helperText: props.errors.scheduleClock || clockHelperText }));\n    const cronTips = (React.createElement(\"p\", null,\n        React.createElement(\"a\", { href: \"https://www.gnu.org/software/mcron/manual/html_node/Crontab-file.html\", target: \"_blank\" }, trans.__('Get help with cron syntax'))));\n    return (React.createElement(React.Fragment, null,\n        React.createElement(FormControl, null,\n            React.createElement(InputLabel, { id: intervalLabelId }, intervalLabelText),\n            React.createElement(Select, { labelId: intervalLabelId, label: intervalLabelText, variant: \"outlined\", id: `${props.idPrefix}interval`, name: \"scheduleInterval\", value: props.model.scheduleInterval, onChange: handleChange },\n                React.createElement(MenuItem, { value: 'minute' }, trans.__('Minute')),\n                React.createElement(MenuItem, { value: 'hour' }, trans.__('Hour')),\n                React.createElement(MenuItem, { value: 'day' }, trans.__('Day')),\n                React.createElement(MenuItem, { value: 'week' }, trans.__('Week')),\n                React.createElement(MenuItem, { value: 'weekday' }, trans.__('Weekday')),\n                React.createElement(MenuItem, { value: 'month' }, trans.__('Month')),\n                React.createElement(MenuItem, { value: 'custom' }, trans.__('Custom schedule')))),\n        props.model.scheduleInterval === 'hour' && (React.createElement(React.Fragment, null,\n            React.createElement(TextField, { label: trans.__('Minutes past the hour'), name: \"scheduleMinute\", value: props.model.scheduleMinute, onChange: handleChange, error: !!props.errors.scheduleMinute, helperText: props.errors.scheduleMinute || trans.__('0–59') }))),\n        props.model.scheduleInterval === 'week' && (React.createElement(React.Fragment, null,\n            React.createElement(FormControl, { error: !!props.errors.scheduleWeekDay },\n                React.createElement(InputLabel, { id: dayOfWeekLabelId }, dayOfWeekText),\n                React.createElement(Select, { labelId: dayOfWeekLabelId, label: dayOfWeekText, variant: \"outlined\", id: `${props.idPrefix}dayOfWeek`, name: \"scheduleWeekDay\", value: props.model.scheduleWeekDay, onChange: handleChange },\n                    React.createElement(MenuItem, { value: '1' }, trans.__('Monday')),\n                    React.createElement(MenuItem, { value: '2' }, trans.__('Tuesday')),\n                    React.createElement(MenuItem, { value: '3' }, trans.__('Wednesday')),\n                    React.createElement(MenuItem, { value: '4' }, trans.__('Thursday')),\n                    React.createElement(MenuItem, { value: '5' }, trans.__('Friday')),\n                    React.createElement(MenuItem, { value: '6' }, trans.__('Saturday')),\n                    React.createElement(MenuItem, { value: '0' }, trans.__('Sunday'))),\n                React.createElement(FormHelperText, null, props.errors.scheduleWeekDay || '')),\n            clockInput,\n            timezonePicker)),\n        (props.model.scheduleInterval === 'weekday' ||\n            props.model.scheduleInterval === 'day') && (React.createElement(React.Fragment, null,\n            clockInput,\n            timezonePicker)),\n        props.model.scheduleInterval === 'month' && (React.createElement(React.Fragment, null,\n            React.createElement(TextField, { label: trans.__('Day of the month'), name: \"scheduleMonthDay\", value: props.model.scheduleMonthDay, onChange: handleChange, error: !!props.errors.scheduleMonthDay, helperText: props.errors.scheduleMonthDay || monthDayHelperText }),\n            clockInput,\n            timezonePicker)),\n        props.model.scheduleInterval === 'custom' && (React.createElement(React.Fragment, null,\n            React.createElement(TextField, { label: trans.__('cron expression'), variant: \"outlined\", onChange: handleChange, value: props.model.schedule, id: `${props.idPrefix}schedule`, name: \"schedule\", error: !!props.errors.schedule, helperText: props.errors.schedule || scheduleHelperText }),\n            cronTips,\n            timezonePicker))));\n}\nfunction parseClock(input) {\n    // Allow h:mm or hh:mm\n    const timeRegex = /^(\\d\\d?):(\\d\\d)$/;\n    const timeResult = timeRegex.exec(input);\n    let hours = undefined;\n    let minutes = undefined;\n    if (timeResult) {\n        hours = parseInt(timeResult[1]);\n        minutes = parseInt(timeResult[2]);\n    }\n    return [hours, minutes];\n}\n// Converts hours and minutes to hh:mm format\nfunction toClock(hours, minutes) {\n    return ((hours < 10 ? '0' + hours : hours) +\n        ':' +\n        (minutes < 10 ? '0' + minutes : minutes));\n}\n/**\n * Extracts cron terms and coerces them into an array of numbers. Ranges are\n * coerced by their first term, e.g. \"12-34\" is coerced to 12.\n */\nfunction parseCron(schedule) {\n    // default values are all valid and should match model.ts\n    const parsedTerms = [0, 0, 1, 1, 1];\n    const terms = /(\\S*) (\\S*) (\\S*) (\\S*) (\\S*)/.exec(schedule.trim());\n    if (!terms || terms.length < 6) {\n        return parsedTerms;\n    }\n    for (let i = 0; i < 5; i++) {\n        const parsed = parseInt(terms[i + 1]);\n        if (!isNaN(parsed)) {\n            parsedTerms[i] = parsed;\n        }\n    }\n    return parsedTerms;\n}\n/**\n * Accepts the model and returns its equivalent cron expression.\n */\nfunction toCron(model) {\n    if (model.scheduleInterval === 'custom') {\n        return model.schedule;\n    }\n    if (model.scheduleInterval === 'minute') {\n        return '* * * * *';\n    }\n    if (model.scheduleInterval === 'hour') {\n        const minute = model.scheduleMinute;\n        return `${minute} * * * *`;\n    }\n    // other intervals always use clock, so parse it\n    const [hour, minute] = parseClock(model.scheduleClock);\n    // leave schedule untouched if invalid clock; validation errors should prevent\n    // submission anyways.\n    if (hour === undefined || minute === undefined) {\n        return model.schedule;\n    }\n    switch (model.scheduleInterval) {\n        case 'day': {\n            return `${minute} ${hour} * * *`;\n        }\n        case 'week': {\n            const weekDay = model.scheduleWeekDay;\n            return `${minute} ${hour} * * ${weekDay}`;\n        }\n        case 'weekday':\n            return `${minute} ${hour} * * MON-FRI`;\n        case 'month': {\n            const monthDay = model.scheduleMonthDay;\n            return `${minute} ${hour} ${monthDay} * *`;\n        }\n    }\n}\n/**\n * Accepts a translation bundle in its constructor and returns the appropriate\n * error message. If no errors are present, the methods return an empty string.\n */\nexport class ScheduleValidator {\n    constructor(trans) {\n        this.trans = trans;\n    }\n    validateClock(input) {\n        const errorMessage = this.trans.__('Time must be in hh:mm format');\n        const [hours, minutes] = parseClock(input);\n        if (hours === undefined ||\n            minutes === undefined ||\n            hours < 0 ||\n            hours > 23 ||\n            minutes < 0 ||\n            minutes > 59) {\n            return errorMessage;\n        }\n        return '';\n    }\n    validateMinute(input) {\n        const errorMessage = this.trans.__('Minute must be between 0 and 59');\n        const minuteRegex = /^(\\d\\d?)$/;\n        const minuteResult = minuteRegex.exec(input);\n        let minutes;\n        if (minuteResult) {\n            minutes = parseInt(minuteResult[1]);\n        }\n        if (minutes === undefined || minutes < 0 || minutes > 59) {\n            return errorMessage;\n        }\n        return ''; // No error\n    }\n    validateMonthDay(input) {\n        const errorMessage = this.trans.__('Day of the month must be between 1 and 31');\n        const monthDayRegex = /^(\\d\\d?)$/;\n        const monthDayResult = monthDayRegex.exec(input);\n        let monthDay;\n        if (monthDayResult) {\n            monthDay = parseInt(monthDayResult[1]);\n        }\n        if (monthDay === undefined || monthDay < 1 || monthDay > 31) {\n            return errorMessage;\n        }\n        return ''; // No error\n    }\n    validateWeekDay(input) {\n        const errorMessage = this.trans.__('Day of the week must be between Monday and Sunday');\n        // OK to compare single chars by lexicographical order\n        if (input.length !== 1 || input < '0' || input > '6') {\n            return errorMessage;\n        }\n        return '';\n    }\n    validateCron(schedule) {\n        try {\n            cronstrue.toString(schedule);\n            // No error\n            return '';\n        }\n        catch (_a) {\n            return this.trans.__('You must provide a valid cron expression.');\n        }\n    }\n}\n","import React from 'react';\nexport function Stack(props) {\n    return (React.createElement(\"div\", { className: `jp-jobs-Stack size-${props.size || 1}` }, props.children));\n}\n","import { nullTranslator } from '@jupyterlab/translation';\nimport React from 'react';\nexport const LogContext = React.createContext((eventName, eventDetail) => {\n    /*noop*/\n});\n// Context to be overridden with JupyterLab context\nconst TranslatorContext = React.createContext(nullTranslator);\nexport default TranslatorContext;\n","import { URLExt } from '@jupyterlab/coreutils';\nimport { ServerConnection } from '@jupyterlab/services';\nconst API_NAMESPACE = 'scheduler';\nexport class SchedulerService {\n    constructor(options) {\n        this.serverSettings =\n            options.serverSettings || ServerConnection.makeSettings();\n    }\n    /**\n     * Serializes a query object into a URI query string. Assumes the keys and\n     * values of the query object as URI-encodable via `encoderURIComponent()`.\n     */\n    serializeToQueryString(jobQuery) {\n        return ('?' +\n            Object.keys(jobQuery)\n                .map(prop => {\n                if (prop === 'sort_by') {\n                    const sortList = jobQuery.sort_by;\n                    if (sortList === undefined) {\n                        return null;\n                    }\n                    // Serialize sort_by as a series of parameters in the firm dir(name)\n                    // where 'dir' is the direction and 'name' the sort field\n                    return sortList\n                        .map(sort => `sort_by=${encodeURIComponent(sort.direction)}(${encodeURIComponent(sort.name)})`)\n                        .join('&');\n                }\n                const value = jobQuery[prop];\n                return `${encodeURIComponent(prop)}=${encodeURIComponent(value)}`;\n            })\n                .join('&'));\n    }\n    async getJobDefinition(definition_id) {\n        let data;\n        try {\n            data = await requestAPI(this.serverSettings, `job_definitions/${definition_id}`, {\n                method: 'GET'\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        return data;\n    }\n    async getJobDefinitions(jobDefintionsQuery, definition_id) {\n        let data;\n        const query = definition_id\n            ? `/${definition_id}`\n            : this.serializeToQueryString(jobDefintionsQuery);\n        try {\n            data = await requestAPI(this.serverSettings, `job_definitions${query}`, {\n                method: 'GET'\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        return data;\n    }\n    async createJobDefinition(definition) {\n        let data;\n        try {\n            data = await requestAPI(this.serverSettings, 'job_definitions', {\n                method: 'POST',\n                body: JSON.stringify(definition)\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        return data;\n    }\n    async deleteJobDefinition(definition_id) {\n        let data;\n        try {\n            data = await requestAPI(this.serverSettings, `job_definitions/${definition_id}`, {\n                method: 'DELETE'\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        return data;\n    }\n    async getJob(job_id) {\n        let data;\n        let query = '';\n        query = `/${job_id}`;\n        try {\n            data = await requestAPI(this.serverSettings, `jobs${query}`, {\n                method: 'GET'\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        return data;\n    }\n    async getJobs(jobQuery, job_id) {\n        let data;\n        const query = job_id ? `/${job_id}` : this.serializeToQueryString(jobQuery);\n        try {\n            data = await requestAPI(this.serverSettings, `jobs${query}`, {\n                method: 'GET'\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        return data;\n    }\n    async getjobCount(status) {\n        let data = { count: 0 }; // Fail safe\n        let query = '';\n        if (status) {\n            query = `?status=${encodeURIComponent(status)}`;\n        }\n        try {\n            data = await requestAPI(this.serverSettings, `jobs/count${query}`, {\n                method: 'GET'\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        return data.count;\n    }\n    async createJob(model) {\n        let data;\n        try {\n            data = await requestAPI(this.serverSettings, 'jobs', {\n                method: 'POST',\n                body: JSON.stringify(model)\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        return data;\n    }\n    async createJobFromDefinition(definition_id, model) {\n        let data;\n        try {\n            data = await requestAPI(this.serverSettings, `job_definitions/${definition_id}/jobs`, {\n                method: 'POST',\n                body: JSON.stringify(model)\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        return data;\n    }\n    async setJobStatus(job_id, status) {\n        try {\n            await requestAPI(this.serverSettings, `jobs/${job_id}`, {\n                method: 'PATCH',\n                body: JSON.stringify({ status })\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    async getRuntimeEnvironments() {\n        let data;\n        try {\n            data = await requestAPI(this.serverSettings, 'runtime_environments', {\n                method: 'GET'\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        return data;\n    }\n    async deleteJob(job_id) {\n        try {\n            await requestAPI(this.serverSettings, `jobs/${job_id}`, {\n                method: 'DELETE'\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    async pauseJobDefinition(jobDefId) {\n        try {\n            await requestAPI(this.serverSettings, `job_definitions/${jobDefId}`, {\n                method: 'PATCH',\n                body: JSON.stringify({ active: false })\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    async resumeJobDefinition(jobDefId) {\n        try {\n            await requestAPI(this.serverSettings, `job_definitions/${jobDefId}`, {\n                method: 'PATCH',\n                body: JSON.stringify({ active: true })\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    async downloadFiles(jobId, redownload = false) {\n        try {\n            await requestAPI(this.serverSettings, `jobs/${jobId}/download_files?redownload=${redownload}`, {\n                method: 'GET'\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    async updateJobDefinition(jobDefId, model) {\n        try {\n            await requestAPI(this.serverSettings, `job_definitions/${jobDefId}`, {\n                method: 'PATCH',\n                body: JSON.stringify(model)\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n}\n/**\n * Call the API extension\n *\n * @param endPoint API REST end point for the extension\n * @param init Initial values for the request\n * @param expectData Is response data expected\n * @returns The response body interpreted as JSON\n */\nasync function requestAPI(settings, endPoint = '', init = {}, expectData = true) {\n    // Make request to Jupyter API\n    const requestUrl = URLExt.join(settings.baseUrl, API_NAMESPACE, endPoint);\n    let response;\n    try {\n        response = await ServerConnection.makeRequest(requestUrl, init, settings);\n    }\n    catch (error) {\n        throw new ServerConnection.NetworkError(error);\n    }\n    let data = await response.text();\n    if (expectData && data.length > 0) {\n        try {\n            data = JSON.parse(data);\n        }\n        catch (_a) {\n            console.error('Not a JSON response body.', response);\n        }\n    }\n    if (!response.ok) {\n        throw new ServerConnection.ResponseError(response, data.message || data);\n    }\n    return data;\n}\nexport var Scheduler;\n(function (Scheduler) {\n    let SortDirection;\n    (function (SortDirection) {\n        SortDirection[\"ASC\"] = \"asc\";\n        SortDirection[\"DESC\"] = \"desc\";\n    })(SortDirection = Scheduler.SortDirection || (Scheduler.SortDirection = {}));\n})(Scheduler || (Scheduler = {}));\n","import { useContext } from 'react';\nimport TranslatorContext, { LogContext } from './context';\nexport function useTranslator(bundleId) {\n    const translator = useContext(TranslatorContext);\n    return translator.load(bundleId);\n}\nexport function useEventLogger() {\n    const logger = useContext(LogContext);\n    return logger;\n}\n","import { ILayoutRestorer } from '@jupyterlab/application';\nimport { Dialog, MainAreaWidget, showDialog, WidgetTracker } from '@jupyterlab/apputils';\nimport { IFileBrowserFactory } from '@jupyterlab/filebrowser';\nimport { ILauncher } from '@jupyterlab/launcher';\nimport { INotebookTracker } from '@jupyterlab/notebook';\nimport { ServerConnection } from '@jupyterlab/services';\nimport { ITranslator } from '@jupyterlab/translation';\nimport AdvancedOptions from './advanced-options';\nimport { calendarAddOnIcon, calendarMonthIcon, eventNoteIcon } from './components/icons';\nimport { SchedulerService } from './handler';\nimport { emptyCreateJobModel, JobsView } from './model';\nimport { NotebookJobsPanel } from './notebook-jobs-panel';\nimport { Scheduler } from './tokens';\nimport { SERVER_EXTENSION_404_JSX } from './util/errors';\nimport { MakeNameValid } from './util/job-name-validation';\nexport var CommandIDs;\n(function (CommandIDs) {\n    CommandIDs.deleteJob = 'scheduling:delete-job';\n    CommandIDs.createJobFileBrowser = 'scheduling:create-from-filebrowser';\n    CommandIDs.createJobCurrentNotebook = 'scheduling:create-from-notebook';\n    CommandIDs.restoreLayout = 'scheduling:restore-layout';\n    CommandIDs.stopJob = 'scheduling:stop-job';\n    CommandIDs.downloadFiles = 'scheduling:download-files';\n    CommandIDs.listJobsFromLauncher = 'scheduling:list-jobs-from-launcher';\n})(CommandIDs || (CommandIDs = {}));\nexport const NotebookJobsPanelId = 'notebook-jobs-panel';\nexport { Scheduler } from './tokens';\n/**\n * Call API to verify that the server extension is actually installed.\n */\nasync function verifyServerExtension(props) {\n    const trans = props.translator.load('jupyterlab');\n    try {\n        await props.api.getJobs({ max_items: 0 });\n    }\n    catch (e) {\n        // in case of 404, show missing server extension dialog and return\n        if (e instanceof ServerConnection.ResponseError &&\n            e.response.status === 404) {\n            showDialog({\n                title: trans.__('Jupyter Scheduler server extension not found'),\n                body: SERVER_EXTENSION_404_JSX,\n                buttons: [Dialog.okButton()]\n            }).catch(console.warn);\n            return;\n        }\n    }\n}\n/**\n * Initialization data for the jupyterlab-scheduler extension.\n */\nconst schedulerPlugin = {\n    id: '@jupyterlab/scheduler:plugin',\n    requires: [\n        IFileBrowserFactory,\n        INotebookTracker,\n        ITranslator,\n        ILayoutRestorer,\n        Scheduler.IAdvancedOptions,\n        Scheduler.TelemetryHandler\n    ],\n    optional: [ILauncher],\n    autoStart: true,\n    activate: activatePlugin\n};\n// Disable this plugin and replace with custom plugin to change the advanced options UI\nconst advancedOptions = {\n    id: '@jupyterlab/scheduler:IAdvancedOptions',\n    autoStart: true,\n    provides: Scheduler.IAdvancedOptions,\n    activate: (app) => {\n        return AdvancedOptions;\n    }\n};\nconst telemetry = {\n    id: '@jupyterlab/scheduler:TelemetryHandler',\n    autoStart: true,\n    provides: Scheduler.TelemetryHandler,\n    activate: (app) => {\n        return async (e) => {\n            /*noop*/\n        };\n    }\n};\nfunction getSelectedItem(widget) {\n    var _a;\n    if (widget === null) {\n        return null;\n    }\n    // Get the first selected item.\n    const firstItem = (_a = widget.selectedItems().next()) === null || _a === void 0 ? void 0 : _a.value;\n    if (firstItem === null || firstItem === undefined) {\n        return null;\n    }\n    return firstItem;\n}\n// Get only the file base name, with no parent directories and no extension,\n// of the currently selected file.\nfunction getSelectedFileBaseName(widget) {\n    const selectedItem = getSelectedItem(widget);\n    if (selectedItem === null) {\n        return null;\n    }\n    const parts = selectedItem.name.split('.');\n    if (parts.length === 1) {\n        // no extension\n        return parts[0];\n    }\n    parts.splice(-1); // Remove the extension\n    return parts.join('.');\n}\n/**\n * Get the file name of the currently selected file with all parent directories, check\n * for and remove \"RTC\" drive prefix potentially added by jupyter-collaboration.\n */\nfunction getSelectedFilePath(widget, contents) {\n    const selectedItem = getSelectedItem(widget);\n    if (selectedItem === null) {\n        return null;\n    }\n    return getLocalPath(selectedItem.path, contents);\n}\n/**\n * Checks if path contains \"RTC\" drive prefix potentially added by jupyter-collaboration\n * and returns a local path removing \"RTC\" prefix if needed\n */\nexport function getLocalPath(path, contents) {\n    if (contents.driveName(path) === 'RTC') {\n        return contents.localPath(path);\n    }\n    return path;\n}\n// Get the containing directory of the file at a particular path.\nfunction getDirectoryFromPath(path) {\n    if (path === null) {\n        return null;\n    }\n    // Remove the final portion of the path, the filename.\n    const directories = path.split('/');\n    directories.pop();\n    // Include a trailing slash only if there is at least one subdirectory.\n    return directories.join('/') + (directories.length > 0 ? '/' : '');\n}\nfunction activatePlugin(app, browserFactory, notebookTracker, translator, restorer, advancedOptions, telemetryHandler, launcher) {\n    const trans = translator.load('jupyterlab');\n    const api = new SchedulerService({});\n    verifyServerExtension({ api, translator });\n    const { commands } = app;\n    const fileBrowserTracker = browserFactory.tracker;\n    const widgetTracker = new WidgetTracker({\n        namespace: 'jupyterlab-scheduler'\n    });\n    restorer.restore(widgetTracker, {\n        command: CommandIDs.restoreLayout,\n        args: widget => widget.content.model.toJson(),\n        name: () => 'jupyterlab-scheduler'\n    });\n    let mainAreaWidget;\n    let jobsPanel;\n    const eventLogger = (eventName, eventDetail) => {\n        if (!eventName) {\n            return;\n        }\n        const eventLog = {\n            body: {\n                name: `org.jupyter.jupyter-scheduler.${eventName}`\n            },\n            timestamp: new Date()\n        };\n        if (eventDetail) {\n            eventLog.body.detail = eventDetail;\n        }\n        telemetryHandler(eventLog).then();\n    };\n    const showJobsPanel = async (data) => {\n        if (!mainAreaWidget || mainAreaWidget.isDisposed) {\n            // Create new jobs panel widget\n            jobsPanel = new NotebookJobsPanel({\n                app,\n                translator,\n                eventLogger,\n                advancedOptions: advancedOptions\n            });\n            // Create new main area widget\n            mainAreaWidget = new MainAreaWidget({\n                content: jobsPanel\n            });\n            mainAreaWidget.id = NotebookJobsPanelId;\n            mainAreaWidget.title.icon = calendarMonthIcon;\n            mainAreaWidget.title.label = trans.__('Notebook Jobs');\n            mainAreaWidget.title.closable = true;\n        }\n        if (!widgetTracker.has(mainAreaWidget)) {\n            // Track the state of the widget for later restoration\n            widgetTracker.add(mainAreaWidget);\n            mainAreaWidget.content.model.stateChanged.connect(() => {\n                void widgetTracker.save(mainAreaWidget);\n            });\n        }\n        if (!mainAreaWidget.isAttached) {\n            app.shell.add(mainAreaWidget, 'main');\n        }\n        mainAreaWidget.content.model.fromJson(data);\n        mainAreaWidget.content.update();\n        app.shell.activateById(mainAreaWidget.id);\n    };\n    // Commands\n    commands.addCommand(CommandIDs.restoreLayout, {\n        execute: async (args) => {\n            showJobsPanel(args);\n        }\n    });\n    commands.addCommand(CommandIDs.createJobFileBrowser, {\n        execute: async () => {\n            var _a, _b, _c;\n            eventLogger('file-browser.create-job');\n            const widget = fileBrowserTracker.currentWidget;\n            const filePath = (_a = getSelectedFilePath(widget, app.serviceManager.contents)) !== null && _a !== void 0 ? _a : '';\n            // Update the job form inside the notebook jobs widget\n            const newCreateModel = emptyCreateJobModel();\n            newCreateModel.inputFile = filePath;\n            newCreateModel.jobName = MakeNameValid((_b = getSelectedFileBaseName(widget)) !== null && _b !== void 0 ? _b : '');\n            newCreateModel.outputPath = (_c = getDirectoryFromPath(filePath)) !== null && _c !== void 0 ? _c : '';\n            await showJobsPanel({\n                jobsView: JobsView.CreateForm,\n                createJobModel: newCreateModel\n            });\n        },\n        label: trans.__('Create Notebook Job'),\n        icon: calendarAddOnIcon\n    });\n    commands.addCommand(CommandIDs.createJobCurrentNotebook, {\n        execute: async () => {\n            var _a, _b, _c;\n            eventLogger('notebook-header.create-job');\n            // Get the current notebook's path and name\n            const widget = fileBrowserTracker.currentWidget;\n            const filePath = (_a = getSelectedFilePath(widget, app.serviceManager.contents)) !== null && _a !== void 0 ? _a : '';\n            const fileName = (_b = getSelectedFileBaseName(widget)) !== null && _b !== void 0 ? _b : '';\n            // Update the job form inside the notebook jobs widget\n            const newCreateModel = emptyCreateJobModel();\n            newCreateModel.inputFile = filePath;\n            newCreateModel.jobName = MakeNameValid(fileName);\n            newCreateModel.outputPath = (_c = getDirectoryFromPath(filePath)) !== null && _c !== void 0 ? _c : '';\n            await showJobsPanel({\n                jobsView: JobsView.CreateForm,\n                createJobModel: newCreateModel\n            });\n        },\n        label: trans.__('Create a notebook job'),\n        icon: calendarAddOnIcon\n    });\n    commands.addCommand(CommandIDs.deleteJob, {\n        execute: async (args) => {\n            const id = args['id'];\n            await api.deleteJob(id);\n        },\n        // TODO: Use args to name command dynamically\n        label: trans.__('Delete Job')\n    });\n    commands.addCommand(CommandIDs.stopJob, {\n        execute: async (args) => {\n            const id = args['id'];\n            await api.setJobStatus(id, 'STOPPED');\n        },\n        // TODO: Use args to name command dynamically\n        label: trans.__('Stop Job')\n    });\n    commands.addCommand(CommandIDs.downloadFiles, {\n        execute: async (args) => {\n            const id = args['id'];\n            const redownload = args['redownload'];\n            await api.downloadFiles(id, redownload);\n        }\n    });\n    // Add to launcher\n    if (launcher) {\n        commands.addCommand(CommandIDs.listJobsFromLauncher, {\n            execute: async () => {\n                eventLogger('launcher.show-jobs');\n                showJobsPanel({\n                    jobsView: JobsView.ListJobs\n                });\n            },\n            label: trans.__('Notebook Jobs'),\n            icon: eventNoteIcon\n        });\n        launcher.add({\n            command: CommandIDs.listJobsFromLauncher,\n            args: {\n                launcher: true\n            }\n        });\n    }\n}\nconst plugins = [\n    schedulerPlugin,\n    advancedOptions,\n    telemetry\n];\nexport { JobsView };\nexport default plugins;\n","import React, { useMemo, useState } from 'react';\nimport { Heading } from '../components/heading';\nimport { Cluster } from '../components/cluster';\nimport { ParametersPicker } from '../components/parameters-picker';\nimport { SchedulerService } from '../handler';\nimport { useEventLogger, useTranslator } from '../hooks';\nimport { JobsView } from '../model';\nimport { Alert, Button, CircularProgress } from '@mui/material';\nimport { Box, Stack } from '@mui/system';\nimport { LabeledValue } from '../components/labeled-value';\nimport { getErrorMessage } from '../util/errors';\nfunction parameterNameMatch(elementName) {\n    const parameterNameMatch = elementName.match(/^parameter-(\\d+)-name$/);\n    if (parameterNameMatch === null) {\n        return null;\n    }\n    return parseInt(parameterNameMatch[1]);\n}\nfunction parameterValueMatch(elementName) {\n    const parameterValueMatch = elementName.match(/^parameter-(\\d+)-value$/);\n    if (parameterValueMatch === null) {\n        return null;\n    }\n    return parseInt(parameterValueMatch[1]);\n}\nexport function CreateJobFromDefinition(props) {\n    const trans = useTranslator('jupyterlab');\n    // A mapping from input names to error messages.\n    // If an error message is \"truthy\" (i.e., not null or ''), we should display the\n    // input in an error state and block form submission.\n    const [errors, setErrors] = useState({});\n    const api = useMemo(() => new SchedulerService({}), []);\n    // Advanced options are not editable; do not block submission on them\n    const anyErrors = Object.keys(errors).some(key => !!errors[key]);\n    const handleInputChange = (event) => {\n        const target = event.target;\n        const parameterNameIdx = parameterNameMatch(target.name);\n        const parameterValueIdx = parameterValueMatch(target.name);\n        const newParams = props.model.parameters || [];\n        if (parameterNameIdx !== null) {\n            newParams[parameterNameIdx].name = target.value;\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { parameters: newParams }));\n        }\n        else if (parameterValueIdx !== null) {\n            newParams[parameterValueIdx].value = target.value;\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { parameters: newParams }));\n        }\n        else {\n            const value = target.type === 'checkbox' ? target.checked : target.value;\n            const name = target.name;\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { [name]: value }));\n        }\n    };\n    // Convert an array of parameters (as used for display) to an object\n    // (for submission to the API)\n    const serializeParameters = (parameters) => {\n        const jobParameters = {};\n        parameters.forEach(param => {\n            const { name, value } = param;\n            if (jobParameters[name] !== undefined) {\n                console.error('Parameter ' +\n                    name +\n                    ' already set to ' +\n                    jobParameters[name] +\n                    ' and is about to be set again to ' +\n                    value);\n            }\n            else {\n                jobParameters[name] = value;\n            }\n        });\n        return jobParameters;\n    };\n    const submitCreateJobRequest = async (event) => {\n        if (anyErrors) {\n            console.error('User attempted to submit a submitCreateJobRequest request; button should have been disabled');\n            return;\n        }\n        if (!props.model.jobDefinitionId) {\n            console.error('User did not provide a job definition ID to submitCreateJobRequest request');\n            return;\n        }\n        const createJobFromDefinitionModel = {};\n        if (props.model.parameters !== undefined) {\n            createJobFromDefinitionModel.parameters = serializeParameters(props.model.parameters);\n        }\n        props.handleModelChange(Object.assign(Object.assign({}, props.model), { createError: undefined, createInProgress: true }));\n        api\n            .createJobFromDefinition(props.model.jobDefinitionId, createJobFromDefinitionModel)\n            .then(response => {\n            log('create-job-from-definition.create-job.success');\n            // Switch to the list view with \"Job List\" active\n            props.showListView(JobsView.ListJobs, response.job_id, props.model.jobName);\n        })\n            .catch((e) => {\n            const detail = getErrorMessage(e);\n            log('create-job-from-definition.create-job.failure', detail);\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { createError: detail, createInProgress: false }));\n        });\n    };\n    const removeParameter = (idx) => {\n        const newParams = props.model.parameters || [];\n        newParams.splice(idx, 1);\n        const newErrors = {};\n        for (const formKey in errors) {\n            const paramMatch = formKey.match(/^parameter-(\\d+)/);\n            const paramIdx = paramMatch && paramMatch.length >= 2 ? parseInt(paramMatch[1]) : -1;\n            if (paramIdx === -1 || paramIdx < idx) {\n                // restore errors associated with params before deleted param and all\n                // other form fields\n                newErrors[formKey] = errors[formKey];\n                continue;\n            }\n            if (paramIdx === idx) {\n                // ignore errors associated with deleted param\n                continue;\n            }\n            // otherwise, restore errors with params after deleted param by offsetting\n            // their index by -1\n            newErrors[`parameter-${paramIdx - 1}-name`] =\n                errors[`parameter-${paramIdx}-name`];\n        }\n        props.handleModelChange(Object.assign(Object.assign({}, props.model), { parameters: newParams }));\n        setErrors(newErrors);\n    };\n    const addParameter = () => {\n        const newParams = props.model.parameters || [];\n        newParams.push({ name: '', value: '' });\n        props.handleModelChange(Object.assign(Object.assign({}, props.model), { parameters: newParams }));\n    };\n    const formPrefix = 'jp-create-job-';\n    const cantSubmit = trans.__('One or more of the fields has an error.');\n    const createError = props.model.createError;\n    const log = useEventLogger();\n    return (React.createElement(Box, { sx: { p: 4 } },\n        React.createElement(\"form\", { className: `${formPrefix}form`, onSubmit: e => e.preventDefault() },\n            React.createElement(Stack, { spacing: 4 },\n                React.createElement(Heading, { level: 1 }, trans.__('Create Job from Job Definition')),\n                createError && React.createElement(Alert, { severity: \"error\" }, createError),\n                React.createElement(LabeledValue, { label: trans.__('Job definition ID'), value: props.model.jobDefinitionId }),\n                React.createElement(ParametersPicker, { label: trans.__('Parameters'), name: 'parameters', id: `${formPrefix}parameters`, value: props.model.parameters || [], onChange: handleInputChange, addParameter: addParameter, removeParameter: removeParameter, formPrefix: formPrefix, errors: errors, handleErrorsChange: setErrors }),\n                React.createElement(Cluster, { gap: 3, justifyContent: \"flex-end\" },\n                    props.model.createInProgress || (React.createElement(React.Fragment, null,\n                        React.createElement(Button, { variant: \"outlined\", onClick: e => {\n                                log('create-job-from-definition.cancel');\n                                props.showListView(JobsView.ListJobs);\n                            } }, trans.__('Cancel')),\n                        React.createElement(Button, { variant: \"contained\", onClick: (e) => {\n                                log('create-job-from-definition.create-job');\n                                submitCreateJobRequest(e);\n                                return false;\n                            }, disabled: anyErrors, title: anyErrors ? cantSubmit : '' }, trans.__('Create')))),\n                    props.model.createInProgress && (React.createElement(React.Fragment, null,\n                        trans.__('Creating job …'),\n                        React.createElement(CircularProgress, { size: \"30px\" }))))))));\n}\n","import React, { useEffect, useMemo, useState, useRef } from 'react';\nimport { Heading } from '../components/heading';\nimport { Cluster } from '../components/cluster';\nimport { ComputeTypePicker } from '../components/compute-type-picker';\nimport { CreateScheduleOptions } from '../components/create-schedule-options';\nimport { EnvironmentPicker } from '../components/environment-picker';\nimport { OutputFormatPicker, outputFormatsForEnvironment } from '../components/output-format-picker';\nimport { ParametersPicker } from '../components/parameters-picker';\nimport { SchedulerService } from '../handler';\nimport { useEventLogger, useTranslator } from '../hooks';\nimport { JobsView } from '../model';\nimport { NameError } from '../util/job-name-validation';\nimport { caretDownIcon } from '@jupyterlab/ui-components';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport FolderIcon from '@mui/icons-material/Folder';\nimport { Accordion, AccordionDetails, AccordionSummary, Alert, Button, CircularProgress, FormLabel, InputAdornment, TextField } from '@mui/material';\nimport { Box, Stack } from '@mui/system';\nimport { getErrorMessage } from '../util/errors';\nimport { PackageInputFolderControl } from '../components/input-folder-checkbox';\nfunction parameterNameMatch(elementName) {\n    const parameterNameMatch = elementName.match(/^parameter-(\\d+)-name$/);\n    if (parameterNameMatch === null) {\n        return null;\n    }\n    return parseInt(parameterNameMatch[1]);\n}\nfunction parameterValueMatch(elementName) {\n    const parameterValueMatch = elementName.match(/^parameter-(\\d+)-value$/);\n    if (parameterValueMatch === null) {\n        return null;\n    }\n    return parseInt(parameterValueMatch[1]);\n}\nexport function CreateJob(props) {\n    var _a, _b, _c;\n    const trans = useTranslator('jupyterlab');\n    // Cache environment list.\n    const [environmentList, setEnvironmentList] = useState([]);\n    const [advancedOptionsExpanded, setAdvancedOptionsExpanded] = useState(false);\n    // A mapping from input names to error messages.\n    // If an error message is \"truthy\" (i.e., not null or ''), we should display the\n    // input in an error state and block form submission.\n    const [errors, setErrors] = useState({});\n    // Errors for the advanced options\n    const [advancedOptionsErrors, setAdvancedOptionsErrors] = useState({});\n    const api = useMemo(() => new SchedulerService({}), []);\n    // Retrieve the environment list once.\n    useEffect(() => {\n        const setList = async () => {\n            var _a, _b;\n            const envList = await api.getRuntimeEnvironments();\n            setEnvironmentList(envList);\n            // Choose the first environment if none was selected before\n            // (this would happen if the create form is used for editing)\n            if (props.model.environment === '') {\n                // If no default compute type is specified, show the first one by default\n                let newComputeType = (_a = envList[0].compute_types) === null || _a === void 0 ? void 0 : _a[0];\n                // Validate that the default compute type is in fact in the list\n                if (envList[0].default_compute_type &&\n                    envList[0].compute_types &&\n                    envList[0].compute_types.includes(envList[0].default_compute_type)) {\n                    newComputeType = envList[0].default_compute_type;\n                }\n                const outputFormats = (_b = outputFormatsForEnvironment(envList, envList[0].name)) === null || _b === void 0 ? void 0 : _b.map(format => format.name);\n                props.handleModelChange(Object.assign(Object.assign({}, props.model), { environment: envList[0].name, computeType: newComputeType, outputFormats: outputFormats }));\n            }\n        };\n        setList();\n    }, []);\n    const envsByName = useMemo(() => {\n        const obj = {};\n        for (const env of environmentList) {\n            obj[env.name] = env;\n        }\n        return obj;\n    }, [environmentList]);\n    const prevEnvName = useRef();\n    /**\n     * Effect: when selected environment changes between supporting/not supporting\n     * timezones, set the timezone accordingly.\n     */\n    useEffect(() => {\n        var _a;\n        const prevEnv = envsByName[(_a = prevEnvName.current) !== null && _a !== void 0 ? _a : ''];\n        const currEnv = envsByName[props.model.environment];\n        if (currEnv && (!prevEnv || prevEnv.utc_only !== currEnv.utc_only)) {\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { timezone: currEnv.utc_only\n                    ? 'UTC'\n                    : Intl.DateTimeFormat().resolvedOptions().timeZone }));\n        }\n        prevEnvName.current = props.model.environment;\n    }, [props.model.environment, envsByName]);\n    // If any error message is \"truthy\" (not null or empty), the form should not be submitted.\n    const anyAdvancedErrors = Object.keys(advancedOptionsErrors).some(key => !!advancedOptionsErrors[key]);\n    const anyErrors = Object.keys(errors).some(key => !!errors[key]) || anyAdvancedErrors;\n    const handleInputChange = (event) => {\n        const target = event.target;\n        const parameterNameIdx = parameterNameMatch(target.name);\n        const parameterValueIdx = parameterValueMatch(target.name);\n        const newParams = props.model.parameters || [];\n        if (parameterNameIdx !== null) {\n            newParams[parameterNameIdx].name = target.value;\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { parameters: newParams }));\n        }\n        else if (parameterValueIdx !== null) {\n            newParams[parameterValueIdx].value = target.value;\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { parameters: newParams }));\n        }\n        else {\n            const value = target.type === 'checkbox' ? target.checked : target.value;\n            const name = target.name;\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { [name]: value }));\n        }\n    };\n    const handleSelectChange = (event) => {\n        var _a, _b;\n        const target = event.target;\n        // if setting the environment, default the compute type to its default value or its first value\n        if (target.name === 'environment') {\n            const envObj = environmentList.find(env => env.name === target.value);\n            // Validate that the default compute type is in fact in the list\n            let newComputeType = (_a = envObj === null || envObj === void 0 ? void 0 : envObj.compute_types) === null || _a === void 0 ? void 0 : _a[0];\n            if ((envObj === null || envObj === void 0 ? void 0 : envObj.default_compute_type) &&\n                (envObj === null || envObj === void 0 ? void 0 : envObj.compute_types) &&\n                (envObj === null || envObj === void 0 ? void 0 : envObj.compute_types.includes(envObj === null || envObj === void 0 ? void 0 : envObj.default_compute_type))) {\n                newComputeType = envObj.default_compute_type;\n            }\n            const newEnvOutputFormats = (_b = outputFormatsForEnvironment(environmentList, target.value)) === null || _b === void 0 ? void 0 : _b.map(format => format.name);\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { environment: target.value, computeType: newComputeType, outputFormats: newEnvOutputFormats }));\n        }\n        else {\n            // otherwise, just set the model\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { [target.name]: target.value }));\n        }\n    };\n    const handleOutputFormatsChange = (event) => {\n        const outputFormatsList = outputFormatsForEnvironment(environmentList, props.model.environment);\n        if (outputFormatsList === null) {\n            return; // No data about output formats; give up\n        }\n        const formatName = event.target.value;\n        const isChecked = event.target.checked;\n        const wasChecked = props.model.outputFormats\n            ? props.model.outputFormats.some(of => of === formatName)\n            : false;\n        const oldOutputFormats = props.model.outputFormats || [];\n        // Go from unchecked to checked\n        if (isChecked && !wasChecked) {\n            // Get the output format matching the given name\n            const newFormat = outputFormatsList.find(of => of.name === formatName);\n            if (newFormat) {\n                props.handleModelChange(Object.assign(Object.assign({}, props.model), { outputFormats: [...oldOutputFormats, newFormat.name] }));\n            }\n        }\n        // Go from checked to unchecked\n        else if (!isChecked && wasChecked) {\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { outputFormats: oldOutputFormats.filter(of => of !== formatName) }));\n        }\n        // If no change in checkedness, don't do anything\n    };\n    const submitForm = async (event) => {\n        // Collapse the \"Advanced Options\" section so that users can see\n        // errors at the top, if there are any.\n        setAdvancedOptionsExpanded(false);\n        switch (props.model.createType) {\n            case 'Job':\n                return submitCreateJobRequest(event);\n            case 'JobDefinition':\n                return submitCreateJobDefinitionRequest(event);\n        }\n    };\n    // Convert an array of parameters (as used for display) to an object\n    // (for submission to the API)\n    const serializeParameters = (parameters) => {\n        const jobParameters = {};\n        parameters.forEach(param => {\n            const { name, value } = param;\n            if (jobParameters[name] !== undefined) {\n                console.error('Parameter ' +\n                    name +\n                    ' already set to ' +\n                    jobParameters[name] +\n                    ' and is about to be set again to ' +\n                    value);\n            }\n            else {\n                jobParameters[name] = value;\n            }\n        });\n        return jobParameters;\n    };\n    const submitCreateJobRequest = async (event) => {\n        if (anyErrors) {\n            console.error('User attempted to submit a createJob request; button should have been disabled');\n            return;\n        }\n        // Serialize parameters as an object.\n        const jobOptions = {\n            name: props.model.jobName,\n            input_uri: props.model.inputFile,\n            runtime_environment_name: props.model.environment,\n            output_formats: props.model.outputFormats,\n            compute_type: props.model.computeType,\n            idempotency_token: props.model.idempotencyToken,\n            tags: props.model.tags,\n            runtime_environment_parameters: props.model.runtimeEnvironmentParameters,\n            package_input_folder: props.model.packageInputFolder\n        };\n        if (props.model.parameters !== undefined) {\n            jobOptions.parameters = serializeParameters(props.model.parameters);\n        }\n        props.handleModelChange(Object.assign(Object.assign({}, props.model), { createError: undefined, createInProgress: true }));\n        api\n            .createJob(jobOptions)\n            .then(response => {\n            log('create-job.create-job.success');\n            // Switch to the list view with \"Job List\" active\n            props.showListView(JobsView.ListJobs, response.job_id, jobOptions.name);\n        })\n            .catch((e) => {\n            const detail = getErrorMessage(e);\n            log('create-job.create-job.failure', detail);\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { createError: detail, createInProgress: false }));\n        });\n    };\n    const submitCreateJobDefinitionRequest = async (event) => {\n        if (anyErrors) {\n            console.error('User attempted to submit a createJobDefinition request; button should have been disabled');\n            return;\n        }\n        const jobDefinitionOptions = {\n            name: props.model.jobName,\n            input_uri: props.model.inputFile,\n            runtime_environment_name: props.model.environment,\n            compute_type: props.model.computeType,\n            output_formats: props.model.outputFormats,\n            tags: props.model.tags,\n            runtime_environment_parameters: props.model.runtimeEnvironmentParameters,\n            schedule: props.model.schedule,\n            timezone: props.model.timezone,\n            package_input_folder: props.model.packageInputFolder\n        };\n        if (props.model.parameters !== undefined) {\n            jobDefinitionOptions.parameters = serializeParameters(props.model.parameters);\n        }\n        props.handleModelChange(Object.assign(Object.assign({}, props.model), { createError: undefined, createInProgress: true }));\n        api\n            .createJobDefinition(jobDefinitionOptions)\n            .then(response => {\n            log('create-job.create-job-definition.success');\n            // Switch to the list view with \"Job Definition List\" active\n            props.showListView(JobsView.ListJobDefinitions, response.job_definition_id, jobDefinitionOptions.name);\n        })\n            .catch((e) => {\n            const detail = getErrorMessage(e);\n            log('create-job.create-job-definition.failure', detail);\n            props.handleModelChange(Object.assign(Object.assign({}, props.model), { createError: detail, createInProgress: false }));\n        });\n    };\n    const removeParameter = (idx) => {\n        const newParams = props.model.parameters || [];\n        newParams.splice(idx, 1);\n        const newErrors = {};\n        for (const formKey in errors) {\n            const paramMatch = formKey.match(/^parameter-(\\d+)/);\n            const paramIdx = paramMatch && paramMatch.length >= 2 ? parseInt(paramMatch[1]) : -1;\n            if (paramIdx === -1 || paramIdx < idx) {\n                // restore errors associated with params before deleted param and all\n                // other form fields\n                newErrors[formKey] = errors[formKey];\n                continue;\n            }\n            if (paramIdx === idx) {\n                // ignore errors associated with deleted param\n                continue;\n            }\n            // otherwise, restore errors with params after deleted param by offsetting\n            // their index by -1\n            newErrors[`parameter-${paramIdx - 1}-name`] =\n                errors[`parameter-${paramIdx}-name`];\n        }\n        props.handleModelChange(Object.assign(Object.assign({}, props.model), { parameters: newParams }));\n        setErrors(newErrors);\n    };\n    const addParameter = () => {\n        const newParams = props.model.parameters || [];\n        newParams.push({ name: '', value: '' });\n        props.handleModelChange(Object.assign(Object.assign({}, props.model), { parameters: newParams }));\n    };\n    const formPrefix = 'jp-create-job-';\n    const cantSubmit = trans.__('One or more of the fields has an error.');\n    const createError = props.model.createError;\n    const homeAdornment = (React.createElement(InputAdornment, { position: \"start\" },\n        React.createElement(FolderIcon, { fontSize: \"small\" }),\n        \"\\u00A0\\u00A0/\"));\n    // Does the currently-selected environment accept times in UTC only?\n    const utcOnly = (_a = envsByName[props.model.environment]) === null || _a === void 0 ? void 0 : _a.utc_only;\n    const log = useEventLogger();\n    return (React.createElement(Box, { sx: { p: 4 } },\n        React.createElement(\"form\", { className: `${formPrefix}form`, onSubmit: e => e.preventDefault() },\n            React.createElement(Stack, { spacing: 4 },\n                React.createElement(Heading, { level: 1 }, trans.__('Create Job')),\n                createError && React.createElement(Alert, { severity: \"error\" }, createError),\n                React.createElement(TextField, { label: trans.__('Job name'), variant: \"outlined\", onChange: e => {\n                        // Validate name\n                        setErrors(Object.assign(Object.assign({}, errors), { jobName: NameError(e.target.value, trans) }));\n                        handleInputChange(e);\n                    }, error: !!errors['jobName'], helperText: (_b = errors['jobName']) !== null && _b !== void 0 ? _b : '', value: props.model.jobName, id: `${formPrefix}jobName`, name: \"jobName\" }),\n                React.createElement(TextField, { label: trans.__('Input file'), variant: \"outlined\", onChange: handleInputChange, value: props.model.inputFile, id: `${formPrefix}inputFile`, helperText: (_c = errors['inputFile']) !== null && _c !== void 0 ? _c : '', name: \"inputFile\", InputProps: {\n                        readOnly: true,\n                        startAdornment: homeAdornment\n                    } }),\n                React.createElement(EnvironmentPicker, { label: trans.__('Environment'), name: 'environment', id: `${formPrefix}environment`, onChange: handleSelectChange, environmentList: environmentList, value: props.model.environment }),\n                React.createElement(PackageInputFolderControl, { onChange: handleInputChange, inputFile: props.model.inputFile }),\n                React.createElement(OutputFormatPicker, { label: trans.__('Output formats'), name: \"outputFormat\", id: `${formPrefix}outputFormat`, onChange: handleOutputFormatsChange, environmentList: environmentList, environment: props.model.environment, value: props.model.outputFormats || [] }),\n                React.createElement(ComputeTypePicker, { label: trans.__('Compute type'), name: \"computeType\", id: `${formPrefix}computeType`, onChange: handleSelectChange, environmentList: environmentList, environment: props.model.environment, value: props.model.computeType }),\n                React.createElement(ParametersPicker, { label: trans.__('Parameters'), name: 'parameters', id: `${formPrefix}parameters`, value: props.model.parameters || [], onChange: handleInputChange, addParameter: addParameter, removeParameter: removeParameter, formPrefix: formPrefix, errors: errors, handleErrorsChange: setErrors }),\n                React.createElement(Accordion, { defaultExpanded: false, expanded: advancedOptionsExpanded, onChange: (e, expanded) => {\n                        log(`create-job.advanced-options.${expanded ? 'expand' : 'collapse'}`);\n                        setAdvancedOptionsExpanded(expanded);\n                    } },\n                    React.createElement(AccordionSummary, { expandIcon: React.createElement(caretDownIcon.react, null), \"aria-controls\": \"panel-content\", id: \"panel-header\" },\n                        React.createElement(FormLabel, { component: \"legend\" },\n                            React.createElement(Cluster, null,\n                                anyAdvancedErrors && (React.createElement(ErrorIcon, { color: \"error\", \"aria-label\": \"error\" }, trans.__('There is an error in the advanced options'))),\n                                trans.__('Additional options')))),\n                    React.createElement(AccordionDetails, { id: `${formPrefix}create-panel-content` },\n                        React.createElement(props.advancedOptions, { jobsView: JobsView.CreateForm, model: props.model, handleModelChange: props.handleModelChange, errors: advancedOptionsErrors, handleErrorsChange: setAdvancedOptionsErrors }))),\n                React.createElement(CreateScheduleOptions, { label: trans.__('Schedule'), name: 'createType', id: `${formPrefix}createType`, model: props.model, handleModelChange: props.handleModelChange, errors: errors, handleErrorsChange: setErrors, utcOnly: utcOnly }),\n                React.createElement(Cluster, { gap: 3, justifyContent: \"flex-end\" },\n                    props.model.createInProgress || (React.createElement(React.Fragment, null,\n                        React.createElement(Button, { variant: \"outlined\", onClick: e => {\n                                log('create-job.cancel');\n                                props.showListView(JobsView.ListJobs);\n                            } }, trans.__('Cancel')),\n                        React.createElement(Button, { variant: \"contained\", onClick: (e) => {\n                                const eventType = props.model.createType === 'Job'\n                                    ? 'create-job'\n                                    : 'create-job-definition';\n                                log(`create-job.${eventType}`);\n                                submitForm(e);\n                                return false;\n                            }, disabled: anyErrors, title: anyErrors ? cantSubmit : '' }, trans.__('Create')))),\n                    props.model.createInProgress && (React.createElement(React.Fragment, null,\n                        props.model.createType === 'Job'\n                            ? trans.__('Creating job …')\n                            : trans.__('Creating job definition …'),\n                        React.createElement(CircularProgress, { size: \"30px\" }))))))));\n}\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { convertDescribeDefinitiontoDefinition, convertDescribeJobtoJobDetail, JobsView } from '../../model';\nimport { useTranslator } from '../../hooks';\nimport { SchedulerService } from '../../handler';\nimport { JobDetail } from './job-detail';\nimport { JobDefinition } from './job-definition';\nimport { Alert, Box, Breadcrumbs, CircularProgress, Link, Stack, Typography } from '@mui/material';\nimport { Heading } from '../../components/heading';\nconst Loading = (props) => (React.createElement(Stack, { direction: \"row\", justifyContent: \"center\" },\n    React.createElement(CircularProgress, { title: props.title })));\n/**\n * Renders both the job details view and the job definition details view,\n * dispatching on `props.jobsView`.\n */\nexport function DetailView(props) {\n    var _a, _b;\n    const [jobModel, setJobsModel] = useState(null);\n    const [jobDefinitionModel, setJobDefinitionModel] = useState(null);\n    const [fetchError, setFetchError] = useState();\n    const trans = useTranslator('jupyterlab');\n    const ss = new SchedulerService({});\n    const fetchJobDetailModel = async () => {\n        try {\n            const jobFromService = await ss.getJob(props.model.id);\n            const jobDetailModel = convertDescribeJobtoJobDetail(jobFromService);\n            setJobsModel(jobDetailModel);\n        }\n        catch (e) {\n            setFetchError(e.message);\n        }\n    };\n    const fetchJobDefinitionModel = async () => {\n        try {\n            const definitionFromService = await ss.getJobDefinition(props.model.id);\n            const jobDefinitionModel = convertDescribeDefinitiontoDefinition(definitionFromService);\n            setJobDefinitionModel(jobDefinitionModel);\n        }\n        catch (e) {\n            setFetchError(e.message);\n        }\n    };\n    const fetchModel = () => {\n        switch (props.jobsView) {\n            case JobsView.JobDetail:\n                fetchJobDetailModel();\n                break;\n            case JobsView.JobDefinitionDetail:\n                fetchJobDefinitionModel();\n                break;\n        }\n    };\n    useEffect(() => {\n        fetchModel();\n    }, [props.jobsView, props.model, props.model.id]);\n    const reload = useCallback(() => {\n        setFetchError(undefined);\n        fetchModel();\n    }, []);\n    const BreadcrumbsStyled = (React.createElement(\"div\", { role: \"presentation\" },\n        React.createElement(Breadcrumbs, { \"aria-label\": \"breadcrumb\" },\n            React.createElement(Link, { underline: \"hover\", color: \"inherit\", onClick: (_) => {\n                    props.setJobsView(props.jobsView === JobsView.JobDetail\n                        ? JobsView.ListJobs\n                        : JobsView.ListJobDefinitions);\n                } }, props.jobsView === JobsView.JobDetail\n                ? trans.__('Notebook Jobs')\n                : trans.__('Notebook Job Definitions')),\n            React.createElement(Typography, { color: \"text.primary\" }, props.jobsView === JobsView.JobDetail\n                ? (_a = jobModel === null || jobModel === void 0 ? void 0 : jobModel.jobName) !== null && _a !== void 0 ? _a : ''\n                : (_b = jobDefinitionModel === null || jobDefinitionModel === void 0 ? void 0 : jobDefinitionModel.name) !== null && _b !== void 0 ? _b : ''))));\n    return (React.createElement(Box, { sx: { p: 4, maxWidth: '1000px' } },\n        React.createElement(Stack, { spacing: 4 },\n            BreadcrumbsStyled,\n            React.createElement(Heading, { level: 1 }, props.jobsView === JobsView.JobDetail\n                ? trans.__('Job Detail')\n                : trans.__('Job Definition')),\n            fetchError && (React.createElement(Alert, { severity: \"error\", onClose: () => setFetchError(undefined) }, fetchError)),\n            props.jobsView === JobsView.JobDetail && (React.createElement(JobDetail, { app: props.app, model: jobModel, handleModelChange: fetchJobDetailModel, setCreateJobModel: props.setCreateJobModel, setJobsView: props.setJobsView, \n                // Extension point: optional additional component\n                advancedOptions: props.advancedOptions, reload: reload })),\n            props.jobsView === JobsView.JobDefinitionDetail && (React.createElement(JobDefinition, { app: props.app, model: jobDefinitionModel, setJobsView: props.setJobsView, refresh: fetchJobDefinitionModel, showCreateJob: props.showCreateJob, showJobDetail: props.showJobDetail, editJobDefinition: props.editJobDefinition, \n                // Extension point: optional additional component\n                advancedOptions: props.advancedOptions, reload: reload })),\n            !jobModel && !jobDefinitionModel && !fetchError && (React.createElement(Loading, { title: trans.__('Loading') })))));\n}\n","import React, { useMemo, useState } from 'react';\nimport { Alert, Button, Card, CardContent, FormLabel, Stack } from '@mui/material';\nimport cronstrue from 'cronstrue';\nimport { ButtonBar } from '../../components/button-bar';\nimport { ConfirmDialogDeleteButton } from '../../components/confirm-dialog-buttons';\nimport { LabeledValue } from '../../components/labeled-value';\nimport { SchedulerService } from '../../handler';\nimport { useEventLogger, useTranslator } from '../../hooks';\nimport { ListJobsTable } from '../list-jobs';\nimport { JobsView, emptyCreateJobModel } from '../../model';\nimport { timestampLocalize } from './job-detail';\nimport { getErrorMessage } from '../../util/errors';\nexport function JobDefinition(props) {\n    var _a, _b, _c, _d;\n    const trans = useTranslator('jupyterlab');\n    const [displayError, setDisplayError] = useState(null);\n    const ss = useMemo(() => new SchedulerService({}), []);\n    const log = useEventLogger();\n    const ReloadButton = (React.createElement(Button, { variant: \"contained\", onClick: e => {\n            log('job-definition-detail.reload');\n            props.reload();\n        } }, trans.__('Reload Job Definition')));\n    const ErrorBanner = displayError && (React.createElement(Alert, { severity: \"error\" }, displayError));\n    if (props.model === null) {\n        return (React.createElement(React.Fragment, null,\n            ErrorBanner,\n            React.createElement(ButtonBar, null, ReloadButton)));\n    }\n    const model = props.model;\n    const handleDeleteJobDefinition = async () => {\n        var _a;\n        ss.deleteJobDefinition((_a = model.definitionId) !== null && _a !== void 0 ? _a : '')\n            .then(_ => props.setJobsView(JobsView.ListJobDefinitions))\n            .catch((e) => {\n            const message = getErrorMessage(e);\n            setDisplayError(message);\n        });\n    };\n    const pauseJobDefinition = async () => {\n        setDisplayError(null);\n        ss.pauseJobDefinition(model.definitionId)\n            .then(_ => props.refresh())\n            .catch((e) => {\n            const message = getErrorMessage(e);\n            setDisplayError(message);\n        });\n    };\n    const resumeJobDefinition = async () => {\n        setDisplayError(null);\n        ss.resumeJobDefinition(model.definitionId)\n            .then(_ => props.refresh())\n            .catch((e) => {\n            const message = getErrorMessage(e);\n            setDisplayError(message);\n        });\n    };\n    const runJobDefinition = () => {\n        var _a;\n        const initialState = Object.assign(Object.assign({}, emptyCreateJobModel()), { jobName: model.name, inputFile: model.inputFile, outputPath: (_a = model.outputPrefix) !== null && _a !== void 0 ? _a : '', environment: model.environment, computeType: model.computeType, runtimeEnvironmentParameters: model.runtimeEnvironmentParameters, parameters: model.parameters, outputFormats: model.outputFormats, jobDefinitionId: model.definitionId });\n        props.showCreateJob(initialState);\n        props.setJobsView(JobsView.CreateFromJobDescriptionForm);\n    };\n    let cronString;\n    try {\n        if (model.schedule !== undefined) {\n            cronString = cronstrue.toString(model.schedule);\n        }\n    }\n    catch (_e) {\n        // Do nothing; let the errors or nothing display instead\n    }\n    const DefinitionButtonBar = (React.createElement(ButtonBar, null,\n        ReloadButton,\n        React.createElement(Button, { variant: \"outlined\", onClick: e => {\n                log('job-definition-detail.run');\n                runJobDefinition();\n            } }, trans.__('Run Job')),\n        model.active ? (React.createElement(Button, { variant: \"outlined\", onClick: e => {\n                log('job-definition-detail.pause');\n                pauseJobDefinition();\n            } }, trans.__('Pause'))) : (React.createElement(Button, { variant: \"outlined\", onClick: e => {\n                log('job-definition-detail.resume');\n                resumeJobDefinition();\n            } }, trans.__('Resume'))),\n        React.createElement(Button, { variant: \"outlined\", onClick: () => {\n                log('job-definition-detail.edit');\n                props.editJobDefinition(model);\n            } }, trans.__('Edit Job Definition')),\n        React.createElement(ConfirmDialogDeleteButton, { handleDelete: async () => {\n                log('job-definition-detail.delete');\n                handleDeleteJobDefinition();\n            }, title: trans.__('Delete Job Definition'), dialogText: trans.__('Are you sure that you want to delete this job definition?') })));\n    const jobDefinitionFields = [\n        [{ value: model.name, label: trans.__('Name') }],\n        [\n            {\n                value: model.inputFile,\n                label: trans.__('Input file')\n            },\n            {\n                value: model.outputPath,\n                label: trans.__('Output directory')\n            }\n        ],\n        [\n            {\n                value: model.environment,\n                label: trans.__('Environment')\n            },\n            {\n                value: model.active ? trans.__('Active') : trans.__('Paused'),\n                label: trans.__('Status')\n            }\n        ],\n        [\n            {\n                value: timestampLocalize((_a = model.createTime) !== null && _a !== void 0 ? _a : ''),\n                label: trans.__('Created at')\n            },\n            {\n                value: timestampLocalize((_b = model.updateTime) !== null && _b !== void 0 ? _b : ''),\n                label: trans.__('Updated at')\n            }\n        ],\n        [\n            {\n                value: (_c = model.schedule) !== null && _c !== void 0 ? _c : '',\n                helperText: cronString !== null && cronString !== void 0 ? cronString : '',\n                label: trans.__('Schedule')\n            },\n            {\n                value: (_d = model.timezone) !== null && _d !== void 0 ? _d : '',\n                label: trans.__('Time zone')\n            }\n        ],\n        [\n            {\n                value: model.packageInputFolder ? trans.__('Yes') : trans.__('No'),\n                label: trans.__('Ran with input folder')\n            }\n        ]\n    ];\n    const JobDefinition = (React.createElement(Card, null,\n        React.createElement(CardContent, null,\n            React.createElement(Stack, { spacing: 4 }, jobDefinitionFields.map(propsRow => (React.createElement(Stack, { direction: 'row', gap: 2, flexWrap: 'wrap' }, propsRow.map(textProp => (React.createElement(LabeledValue, Object.assign({}, textProp, { style: {\n                    flex: '1 1 49%'\n                } })))))))))));\n    const AdvancedOptions = (React.createElement(Card, null,\n        React.createElement(CardContent, null,\n            React.createElement(Stack, { component: \"form\", spacing: 4 },\n                React.createElement(FormLabel, { component: \"legend\" }, trans.__('Advanced Options')),\n                React.createElement(props.advancedOptions, { jobsView: JobsView.JobDefinitionDetail, model: model, handleModelChange: (_) => {\n                        return;\n                    }, errors: {}, handleErrorsChange: (_) => {\n                        return;\n                    } })))));\n    const JobsList = (React.createElement(Card, null,\n        React.createElement(CardContent, null,\n            React.createElement(Stack, { spacing: 3 },\n                React.createElement(ListJobsTable, { app: props.app, showCreateJob: props.showCreateJob, showJobDetail: props.showJobDetail, jobDefinitionId: model.definitionId, pageSize: 5, emptyRowMessage: trans.__('No notebook jobs associated with this job definition.') })))));\n    return (React.createElement(React.Fragment, null,\n        ErrorBanner,\n        DefinitionButtonBar,\n        JobDefinition,\n        JobsList,\n        AdvancedOptions));\n}\n","import React, { useCallback, useState } from 'react';\nimport { ButtonBar } from '../../components/button-bar';\nimport { ConfirmDialogDeleteButton, ConfirmDialogStopButton } from '../../components/confirm-dialog-buttons';\nimport { JobFileLink } from '../../components/job-file-link';\nimport { SchedulerService } from '../../handler';\nimport { useEventLogger, useTranslator } from '../../hooks';\nimport { JobsView } from '../../model';\nimport { Alert, Button, Card, CardContent, FormLabel, Stack, TextField } from '@mui/material';\nimport { CommandIDs } from '../..';\nexport const TextFieldStyled = (props) => (React.createElement(TextField, Object.assign({}, props, { variant: \"outlined\", InputProps: Object.assign(Object.assign({}, props.InputProps), { readOnly: true }), FormHelperTextProps: { sx: { maxWidth: 'fit-content' } } })));\nimport { LabeledValue } from '../../components/labeled-value';\nimport { getErrorMessage } from '../../util/errors';\nexport const timestampLocalize = (time) => {\n    if (time === '') {\n        return '';\n    }\n    else {\n        const display_date = new Date(time);\n        const local_display_date = display_date\n            ? display_date.toLocaleString()\n            : '';\n        return local_display_date;\n    }\n};\nexport function JobDetail(props) {\n    var _a, _b, _c, _d;\n    const trans = useTranslator('jupyterlab');\n    const [downloading, setDownloading] = useState(false);\n    const [displayError, setDisplayError] = useState(null);\n    const ss = new SchedulerService({});\n    const translateStatus = useCallback((status) => {\n        // This may look inefficient, but it's intended to call the `trans` function\n        // with distinct, static values, so that code analyzers can pick up all the\n        // needed source strings.\n        switch (status) {\n            case 'CREATED':\n                return trans.__('Created');\n            case 'QUEUED':\n                return trans.__('Queued');\n            case 'COMPLETED':\n                return trans.__('Completed');\n            case 'FAILED':\n                return trans.__('Failed');\n            case 'IN_PROGRESS':\n                return trans.__('In progress');\n            case 'STOPPED':\n                return trans.__('Stopped');\n            case 'STOPPING':\n                return trans.__('Stopping');\n            default:\n                return '';\n        }\n    }, [trans]);\n    const log = useEventLogger();\n    const handleDeleteJob = async () => {\n        var _a, _b;\n        log('job-detail.delete');\n        setDisplayError(null);\n        ss.deleteJob((_b = (_a = props.model) === null || _a === void 0 ? void 0 : _a.jobId) !== null && _b !== void 0 ? _b : '')\n            .then(_ => props.setJobsView(JobsView.ListJobs))\n            .catch((e) => {\n            const message = getErrorMessage(e);\n            setDisplayError(message);\n        });\n    };\n    const handleStopJob = async () => {\n        var _a;\n        log('job-detail.stop');\n        setDisplayError(null);\n        props.app.commands\n            .execute('scheduling:stop-job', {\n            id: (_a = props.model) === null || _a === void 0 ? void 0 : _a.jobId\n        })\n            .then(_ => props.handleModelChange())\n            .catch((e) => {\n            const message = getErrorMessage(e);\n            setDisplayError(message);\n        });\n    };\n    const downloadFiles = async () => {\n        var _a;\n        log('job-detail.download');\n        setDownloading(true);\n        props.app.commands\n            .execute(CommandIDs.downloadFiles, {\n            id: (_a = props.model) === null || _a === void 0 ? void 0 : _a.jobId,\n            redownload: false\n        })\n            .then(() => {\n            new Promise(res => setTimeout(res, 5000)).then(_ => props.handleModelChange().then(_ => setDownloading(false)));\n        })\n            .catch((e) => {\n            const message = getErrorMessage(e);\n            setDisplayError(message);\n            setDownloading(false);\n        });\n    };\n    const JobButtonBar = (React.createElement(ButtonBar, null,\n        React.createElement(Button, { variant: \"contained\", onClick: e => {\n                log('job-detail.reload');\n                props.reload();\n            } }, trans.__('Reload Job')),\n        props.model !== null &&\n            props.model.downloaded === false &&\n            (props.model.status === 'COMPLETED' ||\n                props.model.status === 'FAILED') && (React.createElement(Button, { variant: \"outlined\", onClick: downloadFiles, disabled: downloading }, trans.__('Download Job Files'))),\n        props.model !== null && props.model.status === 'IN_PROGRESS' && (React.createElement(ConfirmDialogStopButton, { handleStop: handleStopJob, title: trans.__('Stop Job'), dialogText: trans.__('Are you sure that you want to stop this job?') })),\n        props.model !== null && (React.createElement(ConfirmDialogDeleteButton, { handleDelete: handleDeleteJob, title: trans.__('Delete Job'), dialogText: trans.__('Are you sure that you want to delete this job?') }))));\n    // If we don't have a set model, don't display anything else.\n    if (props.model === null) {\n        return (React.createElement(React.Fragment, null,\n            displayError && React.createElement(Alert, { severity: \"error\" }, displayError),\n            JobButtonBar));\n    }\n    const inputJobFile = props.model.job_files.find(jobFile => jobFile.file_format === 'input' && jobFile.file_path);\n    const coreOptionsFields = [\n        [\n            { value: props.model.jobName, label: trans.__('Job name') },\n            { value: props.model.jobId, label: trans.__('Job ID') }\n        ],\n        [\n            {\n                label: trans.__('Input file'),\n                value: inputJobFile ? (React.createElement(JobFileLink, { app: props.app, jobFile: inputJobFile, parentComponentName: \"job-detail\" }, props.model.inputFile)) : (props.model.inputFile)\n            },\n            {\n                value: props.model.environment,\n                label: trans.__('Environment')\n            }\n        ],\n        [\n            {\n                value: translateStatus(props.model.status),\n                label: trans.__('Status')\n            },\n            {\n                value: timestampLocalize((_a = props.model.createTime) !== null && _a !== void 0 ? _a : ''),\n                label: trans.__('Created at')\n            }\n        ],\n        [\n            {\n                value: timestampLocalize((_b = props.model.updateTime) !== null && _b !== void 0 ? _b : ''),\n                label: trans.__('Updated at')\n            },\n            {\n                value: timestampLocalize((_c = props.model.startTime) !== null && _c !== void 0 ? _c : ''),\n                label: trans.__('Start time')\n            }\n        ],\n        [\n            {\n                value: timestampLocalize((_d = props.model.endTime) !== null && _d !== void 0 ? _d : ''),\n                label: trans.__('End time')\n            },\n            {\n                value: props.model.packageInputFolder\n                    ? trans.__('Yes')\n                    : trans.__('No'),\n                label: trans.__('Ran with input folder')\n            }\n        ]\n    ];\n    const hasOutputs = (props.model.status === 'COMPLETED' || props.model.status === 'FAILED') &&\n        props.model.job_files.some(jobFile => jobFile.file_format !== 'input' && jobFile.file_path);\n    const CoreOptions = (React.createElement(Card, null,\n        React.createElement(CardContent, null,\n            React.createElement(Stack, { spacing: 4 },\n                coreOptionsFields.map(propsRow => (React.createElement(Stack, { direction: 'row', gap: 2, flexWrap: 'wrap' }, propsRow.map(textProp => (React.createElement(LabeledValue, Object.assign({}, textProp, { style: {\n                        flex: '1 1 49%'\n                    } }))))))),\n                hasOutputs && (React.createElement(React.Fragment, null,\n                    React.createElement(FormLabel, { component: \"legend\" }, trans.__('Output files')),\n                    props.model.job_files\n                        .filter(jobFile => jobFile.file_format !== 'input' && jobFile.file_path)\n                        .map(jobFile => (React.createElement(JobFileLink, { jobFile: jobFile, app: props.app, parentComponentName: \"job-detail\" })))))))));\n    const Parameters = (React.createElement(Card, null,\n        React.createElement(CardContent, null,\n            React.createElement(FormLabel, { sx: { mb: 4 }, component: \"legend\" }, trans.__('Parameters')),\n            React.createElement(Stack, { spacing: 4 }, props.model.parameters &&\n                props.model.parameters.map((parameter, idx) => (React.createElement(Stack, { key: idx, direction: 'row', gap: 2, flexWrap: 'wrap' },\n                    React.createElement(LabeledValue, { label: trans.__('Parameter name'), value: parameter.name, style: {\n                            flex: '1 1 49%'\n                        } }),\n                    React.createElement(LabeledValue, { label: trans.__('Parameter value'), value: parameter.value, style: {\n                            flex: '1 1 49%'\n                        } }))))))));\n    const AdvancedOptions = (React.createElement(Card, null,\n        React.createElement(CardContent, null,\n            React.createElement(Stack, { component: \"form\", spacing: 4 },\n                React.createElement(FormLabel, { component: \"legend\" }, trans.__('Advanced Options')),\n                React.createElement(props.advancedOptions, { jobsView: JobsView.JobDetail, model: props.model, handleModelChange: (_) => {\n                        return;\n                    }, errors: {}, handleErrorsChange: (_) => {\n                        return;\n                    } })))));\n    return (React.createElement(React.Fragment, null,\n        displayError && React.createElement(Alert, { severity: \"error\" }, displayError),\n        props.model.statusMessage && (React.createElement(Alert, { severity: \"error\" }, props.model.statusMessage)),\n        JobButtonBar,\n        CoreOptions,\n        Parameters,\n        AdvancedOptions));\n}\n","import React, { useState, useMemo, useEffect } from 'react';\nimport { Alert, Button, Box, Breadcrumbs, CircularProgress, Link, Stack, Typography, InputLabel } from '@mui/material';\nimport { Heading } from '../components/heading';\nimport { Cluster } from '../components/cluster';\nimport { ScheduleInputs } from '../components/schedule-inputs';\nimport { JobsView } from '../model';\nimport { useEventLogger, useTranslator } from '../hooks';\nimport { SchedulerService } from '../handler';\nimport { InputFileSnapshot } from '../components/input-file-snapshot';\nimport { LabeledValue } from '../components/labeled-value';\nimport { timestampLocalize } from './detail-view/job-detail';\nimport { getErrorMessage } from '../util/errors';\nfunction EditJobDefinitionBody(props) {\n    const trans = useTranslator('jupyterlab');\n    const log = useEventLogger();\n    const ss = useMemo(() => new SchedulerService({}), []);\n    const [loading, setLoading] = useState(false);\n    const [utcOnly, setUtcOnly] = useState(false);\n    const [saving, setSaving] = useState(false);\n    const [fieldErrors, setFieldErrors] = useState({});\n    const [displayError, setDisplayError] = useState(null);\n    const hasErrors = Object.keys(fieldErrors).some(key => !!fieldErrors[key]);\n    /**\n     * Effect: fetch environment list on initial render, and set timezone\n     * accordingly.\n     */\n    useEffect(() => {\n        async function fetchEnvironments() {\n            setLoading(true);\n            const envs = await ss.getRuntimeEnvironments();\n            const env = envs.find(env => env.name === props.model.environment);\n            if (env === null || env === void 0 ? void 0 : env.utc_only) {\n                setUtcOnly(true);\n                props.handleModelChange(Object.assign(Object.assign({}, props.model), { timezone: 'UTC' }));\n            }\n            setLoading(false);\n        }\n        fetchEnvironments();\n    }, []);\n    const handleSubmit = async () => {\n        if (hasErrors) {\n            return;\n        }\n        setSaving(true);\n        ss.updateJobDefinition(props.model.definitionId, {\n            schedule: props.model.schedule,\n            timezone: props.model.timezone,\n            input_uri: props.model.inputFileSnapshot\n        })\n            .then(() => {\n            props.showJobDefinitionDetail(props.model.definitionId);\n        })\n            .catch((e) => {\n            setSaving(false);\n            const message = getErrorMessage(e);\n            setDisplayError(message);\n        });\n    };\n    if (loading) {\n        return React.createElement(CircularProgress, null);\n    }\n    return (React.createElement(Stack, { spacing: 4, maxWidth: 500 },\n        displayError && (React.createElement(Alert, { severity: \"error\", onClose: () => setDisplayError(null) }, displayError)),\n        React.createElement(InputFileSnapshot, { inputFileSnapshot: props.model.inputFileSnapshot }),\n        React.createElement(InputLabel, null, trans.__('Schedule')),\n        React.createElement(ScheduleInputs, { idPrefix: \"\", model: props.model, handleModelChange: props.handleModelChange, errors: fieldErrors, handleErrorsChange: newErrors => setFieldErrors(newErrors), utcOnly: utcOnly }),\n        React.createElement(Cluster, { gap: 3, justifyContent: \"flex-end\" }, saving ? (React.createElement(React.Fragment, null,\n            trans.__('Saving changes …'),\n            React.createElement(CircularProgress, { size: 30 }))) : (React.createElement(React.Fragment, null,\n            React.createElement(Button, { variant: \"outlined\", onClick: () => {\n                    log('job-definition-edit.cancel');\n                    props.showJobDefinitionDetail(props.model.definitionId);\n                } }, trans.__('Cancel')),\n            React.createElement(Button, { color: \"primary\", variant: \"contained\", onClick: e => {\n                    log('job-definition-edit.save');\n                    handleSubmit();\n                }, disabled: hasErrors }, trans.__('Save Changes')))))));\n}\nexport function EditJobDefinition(props) {\n    const trans = useTranslator('jupyterlab');\n    return (React.createElement(Box, { sx: { p: 4 } },\n        React.createElement(Stack, { spacing: 4 },\n            React.createElement(Breadcrumbs, { \"aria-label\": \"breadcrumb\" },\n                React.createElement(Link, { underline: \"hover\", color: \"inherit\", onClick: () => {\n                        props.showListView(JobsView.ListJobDefinitions);\n                    } }, trans.__('Job Definitions')),\n                React.createElement(Link, { underline: \"hover\", color: \"inherit\", onClick: () => {\n                        props.showJobDefinitionDetail(props.model.definitionId);\n                    } }, props.model.name),\n                React.createElement(Typography, { color: \"text.primary\" }, trans.__('Edit'))),\n            React.createElement(Heading, { level: 1 }, trans.__('Edit Job Definition')),\n            React.createElement(LabeledValue, { value: timestampLocalize(props.model.updateTime), label: trans.__('Job definition updated at') }),\n            React.createElement(EditJobDefinitionBody, Object.assign({}, props)))));\n}\n","import React, { useEffect, useState, useCallback, useMemo } from 'react';\nimport { Alert, Button, Box, Stack, Tab, Tabs } from '@mui/material';\nimport { Heading } from '../components/heading';\nimport { useEventLogger, useTranslator } from '../hooks';\nimport { buildJobRow } from '../components/job-row';\nimport { buildJobDefinitionRow } from '../components/job-definition-row';\nimport { JobsView } from '../model';\nimport { SchedulerService } from '../handler';\nimport { Cluster } from '../components/cluster';\nimport { AdvancedTable } from '../components/advanced-table';\nexport function ListJobsTable(props) {\n    const [jobsQuery, setJobsQuery] = useState(props.jobDefinitionId\n        ? {\n            job_definition_id: props.jobDefinitionId\n        }\n        : {});\n    const [deletedRows, setDeletedRows] = useState(new Set());\n    const [displayError, setDisplayError] = useState(null);\n    const trans = useTranslator('jupyterlab');\n    const log = useEventLogger();\n    // Cache environment list — we need this for the output formats.\n    const [environmentList, setEnvironmentList] = useState([]);\n    const api = useMemo(() => new SchedulerService({}), []);\n    // Retrieve the environment list once.\n    useEffect(() => {\n        const setList = async () => {\n            setEnvironmentList(await api.getRuntimeEnvironments());\n        };\n        setList();\n    }, []);\n    const deleteRow = useCallback((id) => {\n        setDeletedRows(deletedRows => new Set([...deletedRows, id]));\n    }, []);\n    const reload = useCallback(() => {\n        setJobsQuery(query => (Object.assign({}, query)));\n    }, []);\n    const reloadButton = (React.createElement(Cluster, { justifyContent: \"flex-end\" },\n        React.createElement(Button, { variant: \"contained\", size: \"small\", onClick: e => {\n                log('jobs-list.reload');\n                reload();\n            } }, trans.__('Reload'))));\n    const translateStatus = useCallback((status) => {\n        // This may look inefficient, but it's intended to call the `trans` function\n        // with distinct, static values, so that code analyzers can pick up all the\n        // needed source strings.\n        switch (status) {\n            case 'CREATED':\n                return trans.__('Created');\n            case 'QUEUED':\n                return trans.__('Queued');\n            case 'COMPLETED':\n                return trans.__('Completed');\n            case 'FAILED':\n                return trans.__('Failed');\n            case 'IN_PROGRESS':\n                return trans.__('In progress');\n            case 'STOPPED':\n                return trans.__('Stopped');\n            case 'STOPPING':\n                return trans.__('Stopping');\n        }\n    }, [trans]);\n    // Display column headers with sort indicators.\n    const columns = [\n        {\n            sortField: 'name',\n            name: trans.__('Job name')\n        },\n        {\n            sortField: 'input_filename',\n            name: trans.__('Input filename')\n        },\n        {\n            sortField: null,\n            name: trans.__('Output files')\n        },\n        {\n            sortField: 'create_time',\n            name: trans.__('Created at')\n        },\n        {\n            sortField: 'status',\n            name: trans.__('Status')\n        },\n        {\n            sortField: null,\n            name: trans.__('Actions')\n        }\n    ];\n    const renderRow = (job) => buildJobRow(job, environmentList, props.app, props.showCreateJob, deleteRow, translateStatus, props.showJobDetail, reload, setDisplayError);\n    const rowFilter = (job) => !deletedRows.has(job.job_id);\n    const emptyRowMessage = useMemo(() => {\n        var _a;\n        return (_a = props.emptyRowMessage) !== null && _a !== void 0 ? _a : trans.__('There are no notebook jobs. Notebook jobs run files in the background, immediately or on a schedule. ' +\n            'To create a notebook job, right-click on a notebook in the file browser and select \"Create Notebook Job\".');\n    }, [props.emptyRowMessage, trans]);\n    // note that root element here must be a JSX fragment for DataGrid to be sized properly\n    return (React.createElement(React.Fragment, null,\n        displayError && (React.createElement(Alert, { severity: \"error\", onClose: () => setDisplayError(null) }, displayError)),\n        reloadButton,\n        React.createElement(AdvancedTable, { query: jobsQuery, setQuery: setJobsQuery, request: api.getJobs.bind(api), extractRows: (payload) => (payload === null || payload === void 0 ? void 0 : payload.jobs) || [], renderRow: renderRow, columns: columns, emptyRowMessage: emptyRowMessage, rowFilter: rowFilter, height: props.height, pageSize: props.pageSize })));\n}\nfunction ListJobDefinitionsTable(props) {\n    const trans = useTranslator('jupyterlab');\n    const log = useEventLogger();\n    const [jobDefsQuery, setJobDefsQuery] = useState({});\n    const [deletedRows, setDeletedRows] = useState(new Set());\n    const [displayError, setDisplayError] = useState(null);\n    const api = useMemo(() => new SchedulerService({}), []);\n    const deleteRow = useCallback((id) => {\n        setDeletedRows(deletedRows => new Set([...deletedRows, id]));\n    }, []);\n    const columns = [\n        {\n            sortField: 'name',\n            name: trans.__('Job definition name')\n        },\n        {\n            sortField: 'input_filename',\n            name: trans.__('Input filename')\n        },\n        {\n            sortField: 'create_time',\n            name: trans.__('Created at')\n        },\n        {\n            sortField: null,\n            name: trans.__('Schedule')\n        },\n        {\n            sortField: null,\n            name: trans.__('Status')\n        },\n        {\n            sortField: null,\n            name: trans.__('Actions')\n        }\n    ];\n    const reloadButton = (React.createElement(Cluster, { justifyContent: \"flex-end\" },\n        React.createElement(Button, { variant: \"contained\", size: \"small\", onClick: () => {\n                log('jobs-definition-list.reload');\n                setDisplayError(null);\n                setJobDefsQuery(query => (Object.assign({}, query)));\n            } }, trans.__('Reload'))));\n    const renderRow = (jobDef) => buildJobDefinitionRow(jobDef, props.app, props.showJobDefinitionDetail, deleteRow, () => setJobDefsQuery({}), trans, new SchedulerService({}), setDisplayError);\n    const rowFilter = (jobDef) => !deletedRows.has(jobDef.job_definition_id);\n    const emptyRowMessage = useMemo(() => trans.__('There are no notebook job definitions. Notebook job definitions run files in the background on a schedule. ' +\n        'To create a notebook job definition, right-click on a notebook in the file browser and select \"Create Notebook Job\".'), [trans]);\n    return (React.createElement(React.Fragment, null,\n        displayError && (React.createElement(Alert, { severity: \"error\", onClose: () => setDisplayError(null) }, displayError)),\n        reloadButton,\n        React.createElement(AdvancedTable, { query: jobDefsQuery, setQuery: setJobDefsQuery, request: api.getJobDefinitions.bind(api), extractRows: (payload) => (payload === null || payload === void 0 ? void 0 : payload.job_definitions) || [], renderRow: renderRow, columns: columns, emptyRowMessage: emptyRowMessage, rowFilter: rowFilter })));\n}\nexport function NotebookJobsList(props) {\n    const trans = useTranslator('jupyterlab');\n    const jobsHeader = useMemo(() => trans.__('Notebook Jobs'), [trans]);\n    const jobDefinitionsHeader = useMemo(() => trans.__('Notebook Job Definitions'), [trans]);\n    // Display creation message\n    const successMessage = props.newlyCreatedId !== undefined && props.newlyCreatedName !== undefined\n        ? props.listView === JobsView.ListJobs\n            ? trans.__('Your job \"%1\" has been created. ' +\n                'If you do not see it in the list below, please reload the list in a few seconds.', props.newlyCreatedName)\n            : trans.__('Your job definition \"%1\" has been created. ' +\n                'If you do not see it in the list below, please reload the list in a few seconds.', props.newlyCreatedName)\n        : null;\n    const [displayInfo, setDisplayInfo] = useState(successMessage);\n    // Retrieve the initial jobs list\n    return (React.createElement(Box, { sx: { p: 4 }, style: { height: '100%', boxSizing: 'border-box' } },\n        React.createElement(Stack, { spacing: 3, style: { height: '100%' } },\n            React.createElement(Tabs, { value: props.listView, onChange: (_, newTab) => props.showListView(newTab) },\n                React.createElement(Tab, { label: jobsHeader, value: JobsView.ListJobs }),\n                React.createElement(Tab, { label: jobDefinitionsHeader, value: JobsView.ListJobDefinitions })),\n            displayInfo && (React.createElement(Alert, { severity: \"info\", onClose: () => setDisplayInfo(null) }, displayInfo)),\n            props.listView === JobsView.ListJobs && (React.createElement(React.Fragment, null,\n                React.createElement(Heading, { level: 1 }, jobsHeader),\n                React.createElement(ListJobsTable, { app: props.app, showCreateJob: props.showCreateJob, showJobDetail: props.showJobDetail }))),\n            props.listView === JobsView.ListJobDefinitions && (React.createElement(React.Fragment, null,\n                React.createElement(Heading, { level: 1 }, jobDefinitionsHeader),\n                React.createElement(ListJobDefinitionsTable, { app: props.app, showJobDefinitionDetail: props.showJobDefinitionDetail }))))));\n}\n","import { VDomModel } from '@jupyterlab/apputils';\nimport { Signal } from '@lumino/signaling';\n/**\n * Top-level models\n */\nexport var JobsView;\n(function (JobsView) {\n    // assignment ensures any enum value is always truthy\n    JobsView[JobsView[\"CreateForm\"] = 1] = \"CreateForm\";\n    JobsView[JobsView[\"CreateFromJobDescriptionForm\"] = 2] = \"CreateFromJobDescriptionForm\";\n    JobsView[JobsView[\"ListJobs\"] = 3] = \"ListJobs\";\n    JobsView[JobsView[\"ListJobDefinitions\"] = 4] = \"ListJobDefinitions\";\n    JobsView[JobsView[\"JobDetail\"] = 5] = \"JobDetail\";\n    JobsView[JobsView[\"JobDefinitionDetail\"] = 6] = \"JobDefinitionDetail\";\n    JobsView[JobsView[\"EditJobDefinition\"] = 7] = \"EditJobDefinition\";\n})(JobsView || (JobsView = {}));\nexport const defaultScheduleFields = {\n    schedule: '0 0 * * MON-FRI',\n    scheduleInterval: 'weekday',\n    scheduleClock: '00:00',\n    scheduleMinute: '0',\n    scheduleMonthDay: '1',\n    scheduleWeekDay: '1',\n    timezone: Intl.DateTimeFormat().resolvedOptions().timeZone\n};\nexport function emptyCreateJobModel() {\n    return Object.assign({ key: Math.random(), jobName: '', inputFile: '', outputPath: '', environment: '', createType: 'Job' }, defaultScheduleFields);\n}\nexport function emptyUpdateJobDefinitionModel() {\n    return Object.assign({ definitionId: '', name: '', environment: '', inputFileSnapshot: '', updateTime: 0 }, defaultScheduleFields);\n}\nexport function emptyListJobsModel() {\n    return {};\n}\nexport function emptyDetailViewModel() {\n    return {\n        id: ''\n    };\n}\nexport class JobsModel extends VDomModel {\n    constructor(options) {\n        super();\n        this._jobsView = JobsView.ListJobs;\n        this._jobsView = JobsView.ListJobs;\n        this._createJobModel = emptyCreateJobModel();\n        this._listJobsModel = emptyListJobsModel();\n        this._jobDetailModel = emptyDetailViewModel();\n        this._updateJobDefinitionModel = emptyUpdateJobDefinitionModel();\n        this._onModelUpdate = options.onModelUpdate;\n        this._jobCount = 0;\n    }\n    get jobsView() {\n        return this._jobsView;\n    }\n    set jobsView(view) {\n        var _a;\n        this._jobsView = view;\n        (_a = this._onModelUpdate) === null || _a === void 0 ? void 0 : _a.call(this);\n        this.stateChanged.emit(void 0);\n    }\n    get createJobModel() {\n        return this._createJobModel;\n    }\n    set createJobModel(model) {\n        var _a;\n        this._createJobModel = model;\n        (_a = this._onModelUpdate) === null || _a === void 0 ? void 0 : _a.call(this);\n        this.stateChanged.emit(void 0);\n    }\n    get listJobsModel() {\n        return this._listJobsModel;\n    }\n    set listJobsModel(model) {\n        var _a;\n        this._listJobsModel = model;\n        (_a = this._onModelUpdate) === null || _a === void 0 ? void 0 : _a.call(this);\n        this.stateChanged.emit(void 0);\n    }\n    get jobDetailModel() {\n        return this._jobDetailModel;\n    }\n    set jobDetailModel(model) {\n        var _a;\n        this._jobDetailModel = model;\n        (_a = this._onModelUpdate) === null || _a === void 0 ? void 0 : _a.call(this);\n        this.stateChanged.emit(void 0);\n    }\n    get updateJobDefinitionModel() {\n        return this._updateJobDefinitionModel;\n    }\n    set updateJobDefinitionModel(model) {\n        var _a;\n        this._updateJobDefinitionModel = model;\n        (_a = this._onModelUpdate) === null || _a === void 0 ? void 0 : _a.call(this);\n        this.stateChanged.emit(void 0);\n    }\n    get jobCount() {\n        return this._jobCount;\n    }\n    set jobCount(count) {\n        this._jobCount = count;\n    }\n    toJson() {\n        const data = {\n            jobsView: this.jobsView,\n            createJobModel: this.createJobModel,\n            listJobsModel: this.listJobsModel,\n            jobDetailModel: this.jobDetailModel,\n            updateJobDefinitionModel: this.updateJobDefinitionModel\n        };\n        return data;\n    }\n    fromJson(data) {\n        var _a, _b, _c, _d, _e, _f;\n        this._jobsView = (_a = data.jobsView) !== null && _a !== void 0 ? _a : JobsView.ListJobs;\n        this._createJobModel = (_b = data.createJobModel) !== null && _b !== void 0 ? _b : emptyCreateJobModel();\n        this._listJobsModel = (_c = data.listJobsModel) !== null && _c !== void 0 ? _c : emptyListJobsModel();\n        this._jobDetailModel = (_d = data.jobDetailModel) !== null && _d !== void 0 ? _d : emptyDetailViewModel();\n        this._updateJobDefinitionModel =\n            (_e = data.updateJobDefinitionModel) !== null && _e !== void 0 ? _e : emptyUpdateJobDefinitionModel();\n        // emit state changed signal\n        (_f = this._onModelUpdate) === null || _f === void 0 ? void 0 : _f.call(this);\n        this.stateChanged.emit(void 0);\n    }\n}\nconst convertParameters = (parameters) => Object.entries(parameters).map(([pName, pValue]) => {\n    return {\n        name: pName,\n        value: pValue\n    };\n});\n// Convert an IDescribeJobModel to an IJobDetailModel\nexport function convertDescribeJobtoJobDetail(describeJob) {\n    var _a;\n    // Convert parameters\n    const jobParameters = convertParameters((_a = describeJob.parameters) !== null && _a !== void 0 ? _a : {});\n    const convertJobFilesToJson = (files) => {\n        return files.map(file => {\n            return {\n                display_name: file.display_name,\n                file_format: file.file_format,\n                file_path: file.file_path || ''\n            };\n        });\n    };\n    return Object.assign(Object.assign({}, emptyCreateJobModel()), { jobId: describeJob.job_id, jobName: describeJob.name, inputFile: describeJob.input_filename, job_files: convertJobFilesToJson(describeJob.job_files), environment: describeJob.runtime_environment_name, runtimeEnvironmentParameters: describeJob.runtime_environment_parameters, parameters: jobParameters, outputFormats: describeJob.output_formats, computeType: describeJob.compute_type, idempotencyToken: describeJob.idempotency_token, tags: describeJob.tags, status: describeJob.status, statusMessage: describeJob.status_message, createTime: describeJob.create_time, updateTime: describeJob.update_time, startTime: describeJob.start_time, endTime: describeJob.end_time, downloaded: describeJob.downloaded, packageInputFolder: describeJob.package_input_folder });\n}\nexport function convertDescribeDefinitiontoDefinition(describeDefinition) {\n    var _a, _b;\n    // Convert parameters\n    const definitionParameters = convertParameters((_a = describeDefinition.parameters) !== null && _a !== void 0 ? _a : {});\n    return {\n        name: describeDefinition.name,\n        inputFile: describeDefinition.input_filename,\n        definitionId: describeDefinition.job_definition_id,\n        outputPath: (_b = describeDefinition.output_filename_template) !== null && _b !== void 0 ? _b : '',\n        environment: describeDefinition.runtime_environment_name,\n        runtimeEnvironmentParameters: describeDefinition.runtime_environment_parameters,\n        parameters: definitionParameters,\n        outputFormats: describeDefinition.output_formats,\n        computeType: describeDefinition.compute_type,\n        tags: describeDefinition.tags,\n        active: describeDefinition.active,\n        createTime: describeDefinition.create_time,\n        updateTime: describeDefinition.update_time,\n        schedule: describeDefinition.schedule,\n        timezone: describeDefinition.timezone,\n        packageInputFolder: describeDefinition.package_input_folder\n    };\n}\nexport class NotebookJobsListingModel {\n    constructor(scheduled_jobs, next_token) {\n        const inProgressJobs = scheduled_jobs\n            ? scheduled_jobs.filter(job => job.status === 'IN_PROGRESS')\n            : [];\n        this.inProgressJobCount = inProgressJobs.length;\n        this._scheduled_jobs = scheduled_jobs;\n        this.scheduledJobsChanged = new Signal(this);\n        this.inProgressJobCountChanged = new Signal(this);\n    }\n    updateJobs(jobs) {\n        let jobsChanged = false;\n        if (jobs.length !== this._scheduled_jobs.length) {\n            jobsChanged = true;\n        }\n        if (!jobsChanged) {\n            for (let i = 0; i < jobs.length; i++) {\n                const job = jobs[i];\n                const modelJob = this._scheduled_jobs[i];\n                if (job.status !== modelJob.status) {\n                    jobsChanged = true;\n                    break;\n                }\n            }\n        }\n        if (jobsChanged) {\n            this._scheduled_jobs = jobs;\n            this.scheduledJobsChanged.emit(jobs);\n        }\n    }\n    updatejobCount(jobCount) {\n        if (jobCount !== this.inProgressJobCount) {\n            this.inProgressJobCount = jobCount;\n            this.inProgressJobCountChanged.emit(jobCount);\n        }\n    }\n}\n","import React from 'react';\nimport { ThemeProvider } from '@mui/material/styles';\nimport { VDomRenderer } from '@jupyterlab/apputils';\nimport { ErrorBoundary } from './components/error-boundary';\nimport { calendarMonthIcon } from './components/icons';\nimport { CreateJob } from './mainviews/create-job';\nimport { DetailView } from './mainviews/detail-view';\nimport { CreateJobFromDefinition } from './mainviews/create-job-from-definition';\nimport { EditJobDefinition } from './mainviews/edit-job-definition';\nimport { NotebookJobsList } from './mainviews/list-jobs';\nimport { defaultScheduleFields, JobsModel, JobsView } from './model';\nimport { getJupyterLabTheme } from './theme-provider';\nimport TranslatorContext, { LogContext } from './context';\n/**\n * The mime type for a rich contents drag object.\n */\nconst CONTENTS_MIME_RICH = 'application/x-jupyter-icontentsrich';\nexport class NotebookJobsPanel extends VDomRenderer {\n    constructor(options) {\n        var _a, _b, _c;\n        super(options.model ||\n            new JobsModel({\n                onModelUpdate: () => {\n                    // allow us to invoke private parent method\n                    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n                    // @ts-ignore\n                    this.renderDOM();\n                }\n            }));\n        this.removeDragHoverClass = (event) => {\n            var _a, _b, _c, _d;\n            if ((_b = (_a = event.target) === null || _a === void 0 ? void 0 : _a.className) === null || _b === void 0 ? void 0 : _b.includes('draghover')) {\n                (_d = (_c = event.target) === null || _c === void 0 ? void 0 : _c.classList) === null || _d === void 0 ? void 0 : _d.remove('draghover');\n                this._last_input_drop_target = null;\n            }\n        };\n        this.handleDrag = (event) => {\n            var _a, _b, _c, _d, _e, _f, _g, _h;\n            if (this.model.jobsView === JobsView.EditJobDefinition &&\n                ((_b = (_a = event.target) === null || _a === void 0 ? void 0 : _a.className) === null || _b === void 0 ? void 0 : _b.includes('jp-input-file-snapshot'))) {\n                event.preventDefault();\n                event.stopPropagation();\n                event.dropAction = 'move';\n                if (!((_d = (_c = event.target) === null || _c === void 0 ? void 0 : _c.className) === null || _d === void 0 ? void 0 : _d.includes('draghover'))) {\n                    (_f = (_e = event.target) === null || _e === void 0 ? void 0 : _e.classList) === null || _f === void 0 ? void 0 : _f.add('draghover');\n                    (_g = event.target) === null || _g === void 0 ? void 0 : _g.addEventListener('lm-dragleave', this.removeDragHoverClass);\n                    this._last_input_drop_target = event.target;\n                }\n            }\n            else if (this._last_input_drop_target) {\n                (_h = this._last_input_drop_target.classList) === null || _h === void 0 ? void 0 : _h.remove('draghover');\n                this._last_input_drop_target = null;\n            }\n        };\n        this.handleDrop = (event) => {\n            var _a, _b, _c, _d, _e, _f;\n            if (this.model.jobsView === JobsView.EditJobDefinition &&\n                ((_b = (_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.className) === null || _b === void 0 ? void 0 : _b.includes('input-file-snapshot'))) {\n                const mimeData = event.mimeData.getData(CONTENTS_MIME_RICH);\n                event.dropAction = 'copy';\n                event.preventDefault();\n                event.stopPropagation();\n                this.model.updateJobDefinitionModel = Object.assign(Object.assign({}, this.model.updateJobDefinitionModel), { inputFileSnapshot: mimeData.model.path });\n                if ((_d = (_c = event.target) === null || _c === void 0 ? void 0 : _c.className) === null || _d === void 0 ? void 0 : _d.includes('draghover')) {\n                    (_f = (_e = event.target) === null || _e === void 0 ? void 0 : _e.classList) === null || _f === void 0 ? void 0 : _f.remove('draghover');\n                    this._last_input_drop_target = null;\n                }\n            }\n        };\n        this.addClass('jp-notebook-jobs-panel');\n        const trans = options.translator.load('jupyterlab');\n        this.title.icon = (_a = options.titleIcon) !== null && _a !== void 0 ? _a : calendarMonthIcon;\n        this.title.caption = (_b = options.title) !== null && _b !== void 0 ? _b : trans.__('Notebook Jobs');\n        this._description = (_c = options.description) !== null && _c !== void 0 ? _c : trans.__('Job Runs');\n        this._app = options.app;\n        this._translator = options.translator;\n        this._trans = this._translator.load('jupyterlab');\n        this._advancedOptions = options.advancedOptions;\n        this._eventLogger = options.eventLogger;\n        this._last_input_drop_target = null;\n        this.node.setAttribute('role', 'region');\n        this.node.setAttribute('aria-label', trans.__('Notebook Jobs'));\n    }\n    /**\n     * Handle the DOM events for the directory listing.\n     *\n     * @param event - The DOM event sent to the widget.\n     *\n     * #### Notes\n     * This method implements the DOM `EventListener` interface and is\n     * called in response to events on the panel's DOM node. It should\n     * not be called directly by user code (see\n     * https://jupyterlab.readthedocs.io/en/stable/developer/patterns.html,\n     * \"Dom Events\" section).\n     */\n    handleEvent(event) {\n        var _a;\n        switch (event.type) {\n            case 'lm-dragenter':\n                event.preventDefault();\n                event.stopPropagation();\n                break;\n            case 'lm-dragover':\n                this.handleDrag(event);\n                break;\n            case 'lm-drop':\n                this.handleDrop(event);\n                break;\n            case 'lm-dragleave':\n                (_a = event.target) === null || _a === void 0 ? void 0 : _a.removeEventListener('lm-dragleave', this.removeDragHoverClass);\n                break;\n            default:\n                break;\n        }\n    }\n    /**\n     *  A message handler invoked on an `'after-attach'` message.\n     */\n    onAfterAttach(_) {\n        this.node.addEventListener('lm-dragover', this, true);\n        this.node.addEventListener('lm-dragenter', this, true);\n        this.node.addEventListener('lm-drop', this, true);\n    }\n    /**\n     *  A message handler invoked on an `'before-detach'` message.\n     */\n    onBeforeDetach(_) {\n        this.node.removeEventListener('lm-dragover', this, true);\n        this.node.removeEventListener('lm-dragenter', this, true);\n        this.node.removeEventListener('lm-drop', this, true);\n    }\n    showListView(view, newlyCreatedId, newlyCreatedName) {\n        this._newlyCreatedId = newlyCreatedId;\n        this._newlyCreatedName = newlyCreatedName;\n        this.model.jobsView = view;\n    }\n    showDetailView(jobId) {\n        this.model.jobsView = JobsView.JobDetail;\n        this.model.jobDetailModel.id = jobId;\n    }\n    showJobDefinitionDetail(jobDefId) {\n        this.model.jobsView = JobsView.JobDefinitionDetail;\n        this.model.jobDetailModel.id = jobDefId;\n    }\n    editJobDefinition(jobDef) {\n        this.model.jobsView = JobsView.EditJobDefinition;\n        this.model.updateJobDefinitionModel = Object.assign(Object.assign({ definitionId: jobDef.definitionId, name: jobDef.name, environment: jobDef.environment }, defaultScheduleFields), { \n            // TODO: should these properties really be optional?\n            schedule: jobDef.schedule || '* * * * *', timezone: jobDef.timezone || 'UTC', scheduleInterval: 'custom', inputFileSnapshot: jobDef.inputFile, updateTime: jobDef.updateTime });\n    }\n    render() {\n        const showCreateJob = (newModel) => {\n            this.model.createJobModel = newModel;\n            this.model.jobsView = JobsView.CreateForm;\n        };\n        return (React.createElement(ThemeProvider, { theme: getJupyterLabTheme() },\n            React.createElement(TranslatorContext.Provider, { value: this._translator },\n                React.createElement(LogContext.Provider, { value: this._eventLogger.bind(this) },\n                    React.createElement(ErrorBoundary, { alertTitle: this._trans.__('Internal error'), alertMessage: this._trans.__('We encountered an internal error. Please try your command again.'), detailTitle: this._trans.__('Error details') },\n                        this.model.jobsView === JobsView.CreateForm && (React.createElement(CreateJob, { key: this.model.createJobModel.key, model: this.model.createJobModel, handleModelChange: newModel => (this.model.createJobModel = newModel), showListView: this.showListView.bind(this), advancedOptions: this._advancedOptions })),\n                        this.model.jobsView ===\n                            JobsView.CreateFromJobDescriptionForm && (React.createElement(CreateJobFromDefinition, { key: this.model.createJobModel.key, model: this.model.createJobModel, handleModelChange: newModel => (this.model.createJobModel = newModel), showListView: this.showListView.bind(this), advancedOptions: this._advancedOptions })),\n                        (this.model.jobsView === JobsView.ListJobs ||\n                            this.model.jobsView === JobsView.ListJobDefinitions) && (React.createElement(NotebookJobsList, { app: this._app, listView: this.model.jobsView, showListView: this.showListView.bind(this), showCreateJob: showCreateJob, showJobDetail: this.showDetailView.bind(this), showJobDefinitionDetail: this.showJobDefinitionDetail.bind(this), newlyCreatedId: this._newlyCreatedId, newlyCreatedName: this._newlyCreatedName })),\n                        (this.model.jobsView === JobsView.JobDetail ||\n                            this.model.jobsView === JobsView.JobDefinitionDetail) && (React.createElement(DetailView, { app: this._app, model: this.model.jobDetailModel, setCreateJobModel: newModel => (this.model.createJobModel = newModel), jobsView: this.model.jobsView, setJobsView: view => (this.model.jobsView = view), showCreateJob: showCreateJob, showJobDetail: this.showDetailView.bind(this), editJobDefinition: this.editJobDefinition.bind(this), advancedOptions: this._advancedOptions })),\n                        this.model.jobsView === JobsView.EditJobDefinition && (React.createElement(EditJobDefinition, { model: this.model.updateJobDefinitionModel, handleModelChange: newModel => (this.model.updateJobDefinitionModel = newModel), showListView: this.showListView.bind(this), showJobDefinitionDetail: this.showJobDefinitionDetail.bind(this) })))))));\n    }\n}\n","import { createTheme } from '@mui/material/styles';\nfunction getCSSVariable(name) {\n    return getComputedStyle(document.body).getPropertyValue(name).trim();\n}\nexport function getJupyterLabTheme() {\n    const light = document.body.getAttribute('data-jp-theme-light');\n    return createTheme({\n        spacing: 4,\n        components: {\n            MuiButton: {\n                defaultProps: {\n                    size: 'small'\n                }\n            },\n            MuiFilledInput: {\n                defaultProps: {\n                    margin: 'dense'\n                }\n            },\n            MuiFormControl: {\n                defaultProps: {\n                    margin: 'dense',\n                    size: 'small'\n                }\n            },\n            MuiFormHelperText: {\n                defaultProps: {\n                    margin: 'dense'\n                }\n            },\n            MuiIconButton: {\n                defaultProps: {\n                    size: 'small'\n                }\n            },\n            MuiInputBase: {\n                defaultProps: {\n                    margin: 'dense',\n                    size: 'small'\n                }\n            },\n            MuiInputLabel: {\n                defaultProps: {\n                    margin: 'dense'\n                }\n            },\n            MuiListItem: {\n                defaultProps: {\n                    dense: true\n                }\n            },\n            MuiOutlinedInput: {\n                defaultProps: {\n                    margin: 'dense'\n                }\n            },\n            MuiFab: {\n                defaultProps: {\n                    size: 'small'\n                }\n            },\n            MuiTable: {\n                defaultProps: {\n                    size: 'small'\n                }\n            },\n            MuiTextField: {\n                defaultProps: {\n                    margin: 'dense',\n                    size: 'small'\n                }\n            },\n            MuiToolbar: {\n                defaultProps: {\n                    variant: 'dense'\n                }\n            }\n        },\n        palette: {\n            background: {\n                paper: getCSSVariable('--jp-layout-color1'),\n                default: getCSSVariable('--jp-layout-color1')\n            },\n            mode: light === 'true' ? 'light' : 'dark',\n            primary: {\n                main: getCSSVariable('--jp-brand-color1'),\n                light: getCSSVariable('--jp-brand-color2'),\n                dark: getCSSVariable('--jp-brand-color0')\n            },\n            error: {\n                main: getCSSVariable('--jp-error-color1'),\n                light: getCSSVariable('--jp-error-color2'),\n                dark: getCSSVariable('--jp-error-color0')\n            },\n            warning: {\n                main: getCSSVariable('--jp-warn-color1'),\n                light: getCSSVariable('--jp-warn-color2'),\n                dark: getCSSVariable('--jp-warn-color0')\n            },\n            success: {\n                main: getCSSVariable('--jp-success-color1'),\n                light: getCSSVariable('--jp-success-color2'),\n                dark: getCSSVariable('--jp-success-color0')\n            },\n            text: {\n                primary: getCSSVariable('--jp-ui-font-color1'),\n                secondary: getCSSVariable('--jp-ui-font-color2'),\n                disabled: getCSSVariable('--jp-ui-font-color3')\n            }\n        },\n        shape: {\n            borderRadius: 2\n        },\n        typography: {\n            fontFamily: getCSSVariable('--jp-ui-font-family'),\n            fontSize: 12,\n            htmlFontSize: 16,\n            button: {\n                textTransform: 'capitalize'\n            }\n        }\n    });\n}\n","import { Token } from '@lumino/coreutils';\nexport var Scheduler;\n(function (Scheduler) {\n    Scheduler.IAdvancedOptions = new Token('@jupyterlab/scheduler:IAdvancedOptions');\n    Scheduler.TelemetryHandler = new Token('@jupyterlab/scheduler:ITelemetryHandler');\n})(Scheduler || (Scheduler = {}));\n","import React from 'react';\nexport const SERVER_EXTENSION_404_JSX = (React.createElement(\"div\", null,\n    React.createElement(\"p\", null,\n        \"The Jupyter Scheduler extension is installed but it can't be activated. It looks like the required Jupyter Server extension (\",\n        React.createElement(\"code\", null, \"jupyter_scheduler\"),\n        \") is not installed or not enabled in this environment.\"),\n    React.createElement(\"h3\", null, \"Why am I seeing this message?\"),\n    React.createElement(\"p\", null,\n        \"If you installed the Jupyter Scheduler extension from the Extension Manager in JupyterLab, you might have installed only the client extension and not the server extension. You can install the server extension by running \",\n        React.createElement(\"code\", null, \"pip install jupyter_scheduler\"),\n        \" in the same environment in which you run JupyterLab.\"),\n    React.createElement(\"h3\", null, \"How do I check if the extension is installed?\"),\n    React.createElement(\"p\", null,\n        \"Please ensure that \",\n        React.createElement(\"code\", null, \"jupyter server extension list\"),\n        \" includes jupyter_scheduler and that it is enabled. If it is enabled, please restart JupyterLab. If the server extension is installed but not enabled, run\",\n        ' ',\n        React.createElement(\"code\", null, \"jupyter server extension enable --user --py jupyter_scheduler\"),\n        ' ',\n        \"and restart JupyterLab.\")));\nexport function getErrorMessage(e) {\n    return e instanceof Error\n        ? e.message\n        : 'An error occurred. Please try again.';\n}\n","// Utilities to validate and sanitize job names (make them valid)\nconst jobNameRegex = /^[a-zA-Z0-9._][a-zA-Z0-9._ -]{0,62}$/;\nconst invalidFirstCharRegex = /^[^a-zA-Z0-9._]/;\nconst invalidCharRegex = /[^a-zA-Z0-9._ -]/g;\nconst maxLength = 63;\nexport function NameIsValid(name) {\n    return jobNameRegex.test(name);\n}\n// Modify an input string to be a valid name\nexport function MakeNameValid(name) {\n    if (jobNameRegex.test(name)) {\n        return name;\n    }\n    // Clean up first position\n    if (invalidFirstCharRegex.test(name)) {\n        name = name.slice(1);\n    }\n    // Truncate length\n    name = name.substring(0, maxLength);\n    // Purge invalid characters\n    name = name.replace(invalidCharRegex, '');\n    // If nothing's left, put something in so that validation passes\n    if (name === '') {\n        // Deliberately not translated so as not to violate character limits\n        name = 'job';\n    }\n    return name;\n}\nexport function NameError(name, trans) {\n    if (NameIsValid(name)) {\n        return ''; // No errors\n    }\n    // Check for blank\n    if (name === '') {\n        return trans.__('You must specify a name');\n    }\n    // Check for errors in first position\n    if (invalidFirstCharRegex.test(name)) {\n        return trans.__('Name must start with a letter, number, period, or underscore');\n    }\n    // Check for length.\n    if (name.length > maxLength) {\n        return trans.__('Name may not be longer than %1 characters', maxLength);\n    }\n    // By process of elimination, incorrect characters must be present\n    return trans.__('Name must contain only letters, numbers, spaces, periods, hyphens, and underscores');\n}\n"],"names":[],"sourceRoot":""}